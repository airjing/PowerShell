<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>PowerShell Team Blog</title>
	<atom:link href="https://blogs.msdn.microsoft.com/powershell/feed/" rel="self" type="application/rss+xml" />
	<link>https://blogs.msdn.microsoft.com/powershell</link>
	<description>Automating the world one-liner at a time…</description>
	<lastBuildDate>Thu, 15 Mar 2018 22:13:31 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	
	<item>
		<title>DSC Resource Kit Release February 2018</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2018/02/07/dsc-resource-kit-release-february-2018/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2018/02/07/dsc-resource-kit-release-february-2018/#comments</comments>
		<pubDate>Thu, 08 Feb 2018 02:44:07 +0000</pubDate>
		<dc:creator><![CDATA[Katie Keim [MSFT]]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[DSC]]></category>
		<category><![CDATA[DSC Resource Kit]]></category>
		<category><![CDATA[DSC Resources]]></category>
		<category><![CDATA[Resources]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=14015</guid>
		<description><![CDATA[We just released the DSC Resource Kit! This release includes updates to 12 DSC resource modules. In these past 7 weeks, 83 pull requests have been merged and 70 issues have been closed, all thanks to our amazing community! The modules updated in this release are: OfficeOnlineServerDsc SharePointDsc SqlServerDsc StorageDsc (previously xStorage) xActiveDirectory xCertificate xComputerManagement... <a aria-label="read more about DSC Resource Kit Release February 2018" href="https://blogs.msdn.microsoft.com/powershell/2018/02/07/dsc-resource-kit-release-february-2018/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<div class="markdown-body">We just released the DSC Resource Kit! This release includes updates to <strong>12 DSC resource modules</strong>. In these past 7 weeks, <strong>83 pull requests</strong> have been merged and <strong>70 issues</strong> have been closed, all thanks to our amazing community! The modules updated in this release are:
<ul>
<li>OfficeOnlineServerDsc</li>
<li>SharePointDsc</li>
<li>SqlServerDsc</li>
<li>StorageDsc (previously xStorage)</li>
<li>xActiveDirectory</li>
<li>xCertificate</li>
<li>xComputerManagement</li>
<li>xDatabase</li>
<li>xExchange</li>
<li>xFailOverCluster</li>
<li>xHyper-V</li>
<li>xNetworking</li>
</ul>
<p>For a detailed list of the resource modules and fixes in this release, see the Included in this Release section below. Our last <strong>community call</strong> for the DSC Resource Kit was on January 31. A recording of our updates is coming soon. Join us for the next call at 12PM (Pacific time) on March 14 to ask questions and give feedback about your experience with the DSC Resource Kit. We strongly encourage you to update to the newest version of all modules using the PowerShell Gallery, and don&#8217;t forget to give us your feedback in the comments below, on GitHub, or on Twitter (<a href="https://twitter.com/PowerShell_Team" rel="nofollow">@PowerShell_Team</a>)! Please see our new documentation <a href="https://github.com/PowerShell/DscResources/blob/master/Supportability.md">here</a> for information on the support of these resource modules.<br />
<h2>Included in this Release</h2>
<p>You can see a detailed summary of all changes included in this release in the table below. For past release notes, go to the README.md or Changelog.md file on the GitHub repository page for a specific module (see the How to Find DSC Resource Modules on GitHub section below for details on finding the GitHub page for a specific module).<br />
<table>
<thead>
<tr>
<th>Module Name</th>
<th>Version</th>
<th>Release Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>OfficeOnlineServerDsc</td>
<td>1.2.0.0</td>
<td>
<ul>
<li>Added fix for Multiple Language Pack Installs</li>
</ul>
</td>
</tr>
<tr>
<td>SharePointDsc</td>
<td>2.1.0.0</td>
<td>
<ul>
<li>General
<ul>
<li>Updated the integration tests for building the Azure environment
<ul>
<li>Works in any Azure environment.</li>
<li>Updated the SqlServer configuration to use SqlServerDsc version 10.0.0.0.</li>
</ul>
</li>
</ul>
</li>
<li>SPAlternateURL
<ul>
<li>Added the ability to manage the Central Administration AAMs</li>
</ul>
</li>
<li>SPDiagnosticsProvider
<ul>
<li>Added the resource</li>
</ul>
</li>
<li>SPFarm
<ul>
<li>Corrected issue where ServerRole parameter is returned in SP2013</li>
</ul>
</li>
<li>SPInfoPathFormsServiceConfig
<ul>
<li>Added the resource</li>
</ul>
</li>
<li>SPInstallPrereqs
<ul>
<li>Fixed two typos in to be installed Windows features for SharePoint 2016</li>
</ul>
</li>
<li>SPSearchAutoritativePage
<ul>
<li>Added missing readme.md</li>
</ul>
</li>
<li>SPSearchCrawlerImpactRule
<ul>
<li>Fixed issue where an error was thrown when retrieving Crawl Impact rules</li>
<li>Added missing readme.md</li>
</ul>
</li>
<li>SPSearchCrawlMapping
<ul>
<li>Added missing readme.md</li>
</ul>
</li>
<li>SPSecureStoreServiceApp
<ul>
<li>Fixed issue in Get-TargetResource to return AuditingEnabled property</li>
</ul>
</li>
<li>SPSecurityTokenServiceConfig
<ul>
<li>Added the resource</li>
</ul>
</li>
<li>SPServiceIdentity
<ul>
<li>Fixed issue with correctly retrieving the process identity for the Search instance</li>
<li>Added support for LocalSystem, LocalService and NetworkService</li>
</ul>
</li>
<li>SPUserProfileProperty
<ul>
<li>Fixed issues with the User Profile properties for 2016</li>
</ul>
</li>
<li>SPUserProfileServiceAppPermissions
<ul>
<li>Removed the mandatory requirement from secondary parameters</li>
</ul>
</li>
<li>SPUserProfileSyncConnection
<ul>
<li>Fixed issues with the User Profile Sync connection for SharePoint 2016</li>
</ul>
</li>
<li>SPUserProfileSyncService
<ul>
<li>Added returning the FarmAccount to the Get method</li>
</ul>
</li>
<li>SPWebAppAuthentication
<ul>
<li>Corrected issue where parameter validation wasn&#8217;t performed correctly</li>
</ul>
</li>
<li>SPWebApplicationExtension
<ul>
<li>Fixed issue with test always failing when Ensure was set to Absent</li>
</ul>
</li>
<li>SPWorkManagementServiceApp
<ul>
<li>Added check for SharePoint 2016, since this functionality has been removed in SharePoint 2016</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>SqlServerDsc</td>
<td>11.0.0.0</td>
<td>
<ul>
<li>Changes to SqlServerDsc
<ul>
<li>BREAKING CHANGE: Resource SqlRSSecureConnectionLevel was remove (<a href="https://github.com/PowerShell/SqlServerDsc/issues/990">issue 990</a>). The parameter that was set using that resource has been merged into resource SqlRS as the parameter UseSsl. The UseSsl parameter is of type boolean. This change was made because from SQL Server 2008 R2 this value is made an on/off switch. Read more in the article <a href="https://docs.microsoft.com/en-us/sql/reporting-services/wmi-provider-library-reference/configurationsetting-method-setsecureconnectionlevel" rel="nofollow">ConfigurationSetting Method &#8211; SetSecureConnectionLevel</a>.</li>
<li>Updated so that named parameters are used for New-Object cmdlet. This was done to follow the style guideline.</li>
<li>Updated manifest and license to reflect the new year (<a href="https://github.com/PowerShell/SqlServerDsc/issues/965">issue 965</a>).</li>
<li>Added a README.md under Tests\Integration to help contributors to write integration tests.</li>
<li>Added &#8220;Integration tests&#8221; section in the CONTRIBUTING.md.</li>
<li>The complete examples were removed. They were no longer accurate and some referenced resources that no longer exist. Accurate examples can be found in each specific resource example folder. Examples for installing Failover Cluster can be found in the resource examples folders in the xFailOverCluster resource module (<a href="https://github.com/PowerShell/SqlServerDsc/issues/462">issue 462</a>).</li>
<li>A README.md was created under the Examples folder to be used as reference how to install certain scenarios (<a href="https://github.com/PowerShell/SqlServerDsc/issues/462">issue 462</a>).</li>
<li>Removed the local specific common test for compiling examples in this repository and instead opted-in for the common test in the &#8220;DscResource.Tests&#8221; repository (<a href="https://github.com/PowerShell/SqlServerDsc/issues/669">issue 669</a>).</li>
<li>Added new resource SqlServerDatabaseMail for configuring SQL Server Database Mail (<a href="https://github.com/PowerShell/SqlServerDsc/issues/155">issue 155</a>).</li>
<li>Updated the helper function Test-SQLDscParameterState to handle the data type UInt16.</li>
<li>Fixed typo in SqlServerDscCommon.Tests.</li>
<li>Updated README.md with known issue section for each resource.</li>
<li>Resources that did not have a description in the README.md now has one.</li>
<li>Resources that missed links to the examples in the README.md now has those links.</li>
<li>Style changes in all examples, removing type [System.Management.Automation.Credential()] from credential parameters (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1003">issue 1003</a>), and renamed the credential parameter so it is not using abbreviation.</li>
<li>Updated the security token for AppVeyor status badge in README.md. When we renamed the repository the security token was changed (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1012">issue 1012</a>).</li>
<li>Now the helper function Restart-SqlService, after restarting the SQL Server service, does not return until it can connect to the SQL Server instance, and the instance returns status &#8220;Online&#8221; (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1008">issue 1008</a>). If it fails to connect within the timeout period (defaults to 120 seconds) it throws an error.</li>
<li>Fixed typo in comment-base help for helper function Test-AvailabilityReplicaSeedingModeAutomatic.</li>
<li>Style cleanup in helper functions and tests.</li>
</ul>
</li>
<li>Changes to SqlAG
<ul>
<li>Fixed typos in tests.</li>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlAGDatabase
<ul>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlAGListener
<ul>
<li>Fixed typo in comment-based help.</li>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlAGReplica
<ul>
<li>Minor code style cleanup. Removed unused variable and instead piped the cmdlet Join-SqlAvailabilityGroup to Out-Null.</li>
<li>Fixed minor typos in comment-based help.</li>
<li>Fixed minor typos in comment.</li>
<li>Style cleanup in code and tests.</li>
<li>Updated description for parameter Name in README.md and in comment-based help (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1034">issue 1034</a>).</li>
</ul>
</li>
<li>Changes to SqlAlias
<ul>
<li>Fixed issue where exception was thrown if reg keys did not exist (<a href="https://github.com/PowerShell/SqlServerDsc/issues/949">issue 949</a>).</li>
<li>Style cleanup in tests.</li>
</ul>
</li>
<li>Changes to SqlAlwaysOnService
<ul>
<li>Refactor integration tests slightly to improve run time performance (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1001">issue 1001</a>).</li>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlDatabase
<ul>
<li>Fix minor Script Analyzer warning.</li>
</ul>
</li>
<li>Changes to SqlDatabaseDefaultLocation
<ul>
<li>Refactor integration tests slightly to improve run time performance (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1001">issue 1001</a>).</li>
<li>Minor style cleanup of code in tests.</li>
</ul>
</li>
<li>Changes to SqlDatabaseRole
<ul>
<li>Style cleanup in tests.</li>
</ul>
</li>
<li>Changes to SqlRS
<ul>
<li>Replaced Get-WmiObject with Get-CimInstance to fix Script Analyzer warnings (<a href="https://github.com/PowerShell/SqlServerDsc/issues/264">issue 264</a>).</li>
<li>Refactored the resource to use Invoke-CimMethod.</li>
<li>Added parameter UseSsl which when set to $true forces connections to the Reporting Services to use SSL when connecting (<a href="https://github.com/PowerShell/SqlServerDsc/issues/990">issue 990</a>).</li>
<li>Added complete example for SqlRS (based on the integration tests) (<a href="https://github.com/PowerShell/SqlServerDsc/issues/634">issue 634</a>).</li>
<li>Refactor integration tests slightly to improve run time performance (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1001">issue 1001</a>).</li>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlScript
<ul>
<li>Style cleanup in tests.</li>
<li>Updated examples.</li>
<li>Added integration tests.</li>
<li>Fixed minor typos in comment-based help.</li>
<li>Added new example based on integration test.</li>
</ul>
</li>
<li>Changes to SqlServerConfiguration
<ul>
<li>Fixed minor typos in comment-based help.</li>
<li>Now the verbose message say what option is changing and to what value (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1014">issue 1014</a>).</li>
<li>Changed the RestartTimeout parameter from type SInt32 to type UInt32.</li>
<li>Added localization (<a href="https://github.com/PowerShell/SqlServerDsc/issues/605">issue 605</a>).</li>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlServerEndpoint
<ul>
<li>Updated README.md with links to the examples (<a href="https://github.com/PowerShell/SqlServerDsc/issues/504">issue 504</a>).</li>
<li>Style cleanup in tests.</li>
</ul>
</li>
<li>Changes to SqlServerLogin
<ul>
<li>Added integration tests (<a href="https://github.com/PowerShell/SqlServerDsc/issues/748">issue 748</a>).</li>
<li>Minor code style cleanup.</li>
<li>Removed unused variable and instead piped the helper function Connect-SQL to Out-Null.</li>
<li>Style cleanup in tests.</li>
</ul>
</li>
<li>Changes to SqlServerMaxDop
<ul>
<li>Minor style changes in the helper function Get-SqlDscDynamicMaxDop.</li>
</ul>
</li>
<li>Changes to SqlServerMemory
<ul>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlServerPermission
<ul>
<li>Fixed minor typos in comment-based help.</li>
<li>Style cleanup in code.</li>
</ul>
</li>
<li>Changes to SqlServerReplication
<ul>
<li>Fixed minor typos in verbose messages.</li>
<li>Style cleanup in tests.</li>
</ul>
</li>
<li>Changes to SqlServerNetwork
<ul>
<li>Added sysadmin account parameter usage to the examples.</li>
</ul>
</li>
<li>Changes to SqlServerReplication
<ul>
<li>Fix Script Analyzer warning (<a href="https://github.com/PowerShell/SqlServerDsc/issues/263">issue 263</a>).</li>
</ul>
</li>
<li>Changes to SqlServerRole
<ul>
<li>Added localization (<a href="https://github.com/PowerShell/SqlServerDsc/issues/621">issue 621</a>).</li>
<li>Added integration tests (<a href="https://github.com/PowerShell/SqlServerDsc/issues/756">issue 756</a>).</li>
<li>Updated example to add two server roles in the same configuration.</li>
<li>Style cleanup in tests.</li>
</ul>
</li>
<li>Changes to SqlServiceAccount
<ul>
<li>Default services are now properly detected (<a href="https://github.com/PowerShell/SqlServerDsc/issues/930">issue 930</a>).</li>
<li>Made the description of parameter RestartService more descriptive (<a href="https://github.com/PowerShell/SqlServerDsc/issues/960">issue 960</a>).</li>
<li>Added a read-only parameter ServiceAccountName so that the service account name is correctly returned as a string (<a href="https://github.com/PowerShell/SqlServerDsc/issues/982">issue 982</a>).</li>
<li>Added integration tests (<a href="https://github.com/PowerShell/SqlServerDsc/issues/980">issue 980</a>).</li>
<li>The timing issue that the resource returned before SQL Server service was actually restarted has been solved by a change in the helper function Restart-SqlService (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1008">issue 1008</a>). Now Restart-SqlService waits for the instance to return status &#8220;Online&#8221; or throws an error saying it failed to connect within the timeout period.</li>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlSetup
<ul>
<li>Added parameter <code>ASServerMode</code> to support installing Analysis Services in Multidimensional mode, Tabular mode and PowerPivot mode (<a href="https://github.com/PowerShell/SqlServerDsc/issues/388">issue 388</a>).</li>
<li>Added integration tests for testing Analysis Services Multidimensional mode and Tabular mode.</li>
<li>Cleaned up integration tests.</li>
<li>Added integration tests for installing a default instance of Database Engine.</li>
<li>Refactor integration tests slightly to improve run time performance (<a href="https://github.com/PowerShell/SqlServerDsc/issues/1001">issue 1001</a>).</li>
<li>Added PSSA rule &#8220;PSUseDeclaredVarsMoreThanAssignments&#8221; override in the function Set-TargetResource for the variable $global:DSCMachineStatus.</li>
<li>Style cleanup in code and tests.</li>
</ul>
</li>
<li>Changes to SqlWaitForAG
<ul>
<li>Style cleanup in code.</li>
</ul>
</li>
<li>Changes to SqlWindowsFirewall
<ul>
<li>Fixed minor typos in comment-based help.</li>
<li>Style cleanup in code.</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>StorageDsc</td>
<td>4.0.0.0</td>
<td>
<ul>
<li>BREAKING CHANGE:
<ul>
<li>Renamed xStorage to StorageDsc</li>
<li>Renamed MSFT_xDisk to MSFT_Disk</li>
<li>Renamed MSFT_xDiskAccessPath to MSFT_DiskAccessPath</li>
<li>Renamed MSFT_xMountImage to MSFT_MountImage</li>
<li>Renamed MSFT_xOpticalDiskDriveLetter to MSFT_OpticalDiskDriveLetter</li>
<li>Renamed MSFT_xWaitForDisk to MSFT_WaitForDisk</li>
<li>Renamed MSFT_xWaitForVolume to MSFT_WaitforVolume</li>
<li>Deleted xStorage folder under StorageDsc/Modules</li>
<li>See [Issue 129](https://github.com/PowerShell/xStorage/issues/129)</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xActiveDirectory</td>
<td>2.17.0.0</td>
<td>
<ul>
<li>Converted AppVeyor.yml to use DSCResource.tests shared code.</li>
<li>Opted-In to markdown rule validation.</li>
<li>Readme.md modified resolve markdown rule violations.</li>
<li>Added CodeCov.io support.</li>
<li>Added xADServicePrincipalName resource.</li>
</ul>
</td>
</tr>
<tr>
<td>xCertificate</td>
<td>3.2.0.0</td>
<td>
<ul>
<li>Get-CertificateTemplateName: Fix missing template name</li>
</ul>
</td>
</tr>
<tr>
<td>xComputerManagement</td>
<td>4.0.0.0</td>
<td>
<ul>
<li>BREAKING CHANGE: xScheduledTask:
<ul>
<li>Breaking change because <code>Get-TargetResource</code> no longer outputs <code>ActionExecutable</code> and <code>ScheduleType</code> properties when the scheduled task does not exist. It will also include <code>TaskPath</code> in output when scheduled task does not exist.</li>
</ul>
</li>
<li>xScheduledTask:
<ul>
<li>Add support to disable built-in scheduled tasks &#8211; See <a href="https://github.com/PowerShell/xComputerManagement/issues/74">Issue 74</a>.</li>
<li>Fix unit test mocked schedule task object structure.</li>
<li>Fix error message when trigger type is unknown &#8211; See <a href="https://github.com/PowerShell/xComputerManagement/issues/121">Issue 121</a>.</li>
<li>Moved strings into separate strings file.</li>
<li>Updated to meet HQRM guidelines.</li>
</ul>
</li>
<li>xComputer:
<ul>
<li>Resolved bug in Get-ComputerDomain where LocalSystem doesn&#8221;t have rights to the domain.</li>
</ul>
</li>
<li>Updated tests to meet Pester V4 guidelines &#8211; See <a href="https://github.com/PowerShell/xComputerManagement/issues/106">Issue 106</a>.</li>
<li>Converted module to use auto documentation format.</li>
</ul>
</td>
</tr>
<tr>
<td>xDatabase</td>
<td>1.7.0.0</td>
<td>
<ul>
<li>Added support SQL Server 2016</li>
</ul>
</td>
</tr>
<tr>
<td>xExchange</td>
<td>1.19.0.0</td>
<td>
<ul>
<li>Added missing parameters to xExchActiveSyncVirtualDirectory</li>
<li>Added missing parameters to xExchAutoDiscoverVirtualDirectory</li>
<li>Added missing parameters to xExchWebServicesVirtualDirectory</li>
</ul>
</td>
</tr>
<tr>
<td>xFailOverCluster</td>
<td>1.9.0.0</td>
<td>
<ul>
<li>Changes to xFailoverCluster
<ul>
<li>Update Pester syntax to v4</li>
<li>Updated year to 2018 in license file and module manifest (<a href="https://github.com/PowerShell/xFailOverCluster/issues/167">issue 167</a>).</li>
</ul>
</li>
<li>Changes to xClusterNetwork
<ul>
<li>Updated readme to describe process for adding and removing additional networks on clusters</li>
</ul>
</li>
<li>Changes to xCluster
<ul>
<li>Allow the cluster to be assigned an IP address from a DHCP (<a href="https://github.com/PowerShell/xFailOverCluster/issues/109">issue 109</a>). When the parameter StaticIPAddress is not specified then the cluster will be configured to use an IP address from a DHCP.</li>
<li>Get-TargetResource now correctly returns the IP address instead of throwing and error (<a href="https://github.com/PowerShell/xFailOverCluster/issues/28">issue 28</a>).</li>
<li>Added -IgnoreNetwork parameter (<a href="https://github.com/PowerShell/xFailOverCluster/issues/143">issue 143</a>).</li>
</ul>
</li>
<li>Changes to xClusterQuorum
<ul>
<li>When using NodeAndFileShareMajority on Windows Server 2016 any subsequent run failed when Test-TargetResource validated the configuration.</li>
<li>Cleaned up tests which was using over complicated evaluation code.</li>
<li>Added cloud witness (Azure storage) functionality on Windows 2016 (<a href="https://github.com/PowerShell/xFailOverCluster/issues/37">issue 37</a>).</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xHyper-V</td>
<td>3.11.0.0</td>
<td>
<ul>
<li>Added the following resources:
<ul>
<li>MSFT_xVMHardDiskDrive to manage additional attached VHD/Xs.</li>
<li>MSFT_xVMScsiController to manage virtual machine SCSI controllers.</li>
</ul>
</li>
<li>MSFT_xVMSwitch:
<ul>
<li>Added parameter ot specify the Load Balancing Algorithm of a vSwitch with Switch Embedded Teaming (SET)</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xNetworking</td>
<td>5.5.0.0</td>
<td>
<ul>
<li>MSFT_xNetAdapterAdvancedProperty:
<ul>
<li>Created new resource configuring AdvancedProperties for NetAdapter</li>
</ul>
</li>
<li>MSFT_xNetAdapterLso:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Updated tests to meet Pester v4 guidelines.</li>
</ul>
</li>
<li>MSFT_xNetAdapterName:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Updated tests to meet Pester v4 guidelines.</li>
</ul>
</li>
<li>MSFT_xNetAdapterRDMA:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Updated tests to meet Pester v4 guidelines.</li>
<li>Converted exceptions to use ResourceHelper functions.</li>
<li>Improved integration tests to preserve system status and run in more scenarios.</li>
</ul>
</li>
<li>MSFT_xNetBIOS:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Updated tests to meet Pester v4 guidelines.</li>
<li>Converted exceptions to use ResourceHelper functions.</li>
<li>Improved integration tests to preserve system status, run in more scenarios and more effectively test the resource.</li>
<li>Changed to report back error if unable to set NetBIOS setting.</li>
</ul>
</li>
<li>MSFT_xWinsSetting:
<ul>
<li>Created new resource for enabling/disabling LMHOSTS lookup and enabling/disabling WINS name resoluton using DNS.</li>
</ul>
</li>
<li>MSFT_xNetworkTeam:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Updated tests to meet Pester v4 guidelines.</li>
<li>Converted exceptions to use ResourceHelper functions.</li>
</ul>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<h2>How to Find Released DSC Resource Modules</h2>
<p>To see a list of <strong>all</strong> released DSC Resource Kit modules, go to the <a href="http://www.powershellgallery.com/" rel="nofollow">PowerShell Gallery</a> and display <a href="http://www.powershellgallery.com/packages?q=Tags%3A%22DSCResourceKit%22" rel="nofollow">all modules tagged as DSCResourceKit</a>. You can also enter a module&#8217;s name in the search box in the upper right corner of the PowerShell Gallery to find a specific module. Of course, you can also always use PowerShellGet (available in <a href="https://www.microsoft.com/en-us/download/details.aspx?id=50395" rel="nofollow">WMF 5.0</a>) to find modules with DSC Resources:
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c"># To list all modules that tagged as DSCResourceKit</span>
<span class="pl-c1">Find-Module</span> <span class="pl-k">-</span>Tag DSCResourceKit 
<span class="pl-c"># To list all DSC resources from all sources </span>
<span class="pl-c1">Find-DscResource</span></pre>
</div>
<p>Please note only those modules released by the PowerShell Team are currently considered part of the &#8216;DSC Resource Kit&#8217; regardless of the presence of the &#8216;DSC Resource Kit&#8217; tag in the PowerShell Gallery. To find a <strong>specific</strong> module, go directly to its URL on the PowerShell Gallery: <a href="http://www.powershellgallery.com/packages/" rel="nofollow">http://www.powershellgallery.com/packages/</a>&lt; module name &gt; For example: <a href="http://www.powershellgallery.com/packages/xWebAdministration" rel="nofollow">http://www.powershellgallery.com/packages/xWebAdministration</a><br />
<h2>How to Install DSC Resource Modules From the PowerShell Gallery</h2>
<p>We recommend that you use PowerShellGet to install DSC resource modules:
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Install-Module</span> <span class="pl-k">-</span>Name <span class="pl-k">&lt;</span> module name <span class="pl-k">&gt;</span></pre>
</div>
<p>For example:
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Install-Module</span> <span class="pl-k">-</span>Name xWebAdministration</pre>
</div>
<p>To update all previously installed modules at once, open an elevated PowerShell prompt and use this command:
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Update-Module</span></pre>
</div>
<p>After installing modules, you can discover all DSC resources available to your local system with this command:
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Get-DscResource</span></pre>
</div>
<h2>How to Find DSC Resource Modules on GitHub</h2>
<p>All resource modules in the DSC Resource Kit are available open-source on GitHub. You can see the most recent state of a resource module by visiting its GitHub page at: <a href="https://github.com/PowerShell/">https://github.com/PowerShell/</a>&lt; module name &gt; For example, for the xCertificate module, go to: <a href="https://github.com/PowerShell/xCertificate">https://github.com/PowerShell/xCertificate</a>. All DSC modules are also listed as submodules of the <a href="https://github.com/PowerShell/DscResources/">DscResources repository</a> in the <a href="https://github.com/PowerShell/DscResources/tree/master/xDscResources">xDscResources folder</a>.<br />
<h2>How to Contribute</h2>
<p>You are more than welcome to contribute to the development of the DSC Resource Kit! There are several different ways you can help. You can create new DSC resources or modules, add test automation, improve documentation, fix existing issues, or open new ones. See our <a href="https://github.com/PowerShell/DscResources/blob/master/CONTRIBUTING.md">contributing guide</a> for more info on how to become a DSC Resource Kit contributor. If you would like to help, please take a look at the list of <a href="https://github.com/PowerShell/DscResources/issues">open issues</a> for the DscResources repository. You can also check issues for specific resource modules by going to: <a href="https://github.com/PowerShell/">https://github.com/PowerShell/</a>&lt; module name &gt;/issues For example: <a href="https://github.com/PowerShell/xPSDesiredStateConfiguration/issues">https://github.com/PowerShell/xPSDesiredStateConfiguration/issues</a> Your help in developing the DSC Resource Kit is invaluable to us!<br />
<h2>Questions, comments?</h2>
<p>If you&#8217;re looking into using PowerShell DSC, have questions or issues with a current resource, or would like a new resource, let us know in the comments below, on Twitter (<a href="https://twitter.com/PowerShell_Team" rel="nofollow">@PowerShell_Team</a>), or by creating an issue on <a href="https://github.com/powershell/dscresources/issues">GitHub</a>. Katie Keim Software Engineer PowerShell DSC Team <a href="https://twitter.com/katiedsc" rel="nofollow">@katiedsc</a> (Twitter) <a href="https://github.com/kwirkykat">@kwirkykat</a> (GitHub)</div>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2018/02/07/dsc-resource-kit-release-february-2018/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Desired State Configuration (DSC) Planning Update &#8211; January 2018</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2018/01/26/dsc-planning-update-january-2018/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2018/01/26/dsc-planning-update-january-2018/#comments</comments>
		<pubDate>Sat, 27 Jan 2018 00:00:32 +0000</pubDate>
		<dc:creator><![CDATA[Michael Greene]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13995</guid>
		<description><![CDATA[In September 2017 we communicated some of our plans for PowerShell Desired State Configuration (DSC). Over the past few months, we have been executing on these plans and collecting feedback from customers and partners. The intent of this blog is to provide an update on the plans we shared back in September. I will have... <a aria-label="read more about Desired State Configuration (DSC) Planning Update &#8211; January 2018" href="https://blogs.msdn.microsoft.com/powershell/2018/01/26/dsc-planning-update-january-2018/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<p>In September 2017 we communicated some of our plans for PowerShell Desired State Configuration (DSC). Over the past few months, we have been executing on these plans and collecting feedback from customers and partners. The intent of this blog is to provide an update on the plans we shared back in September. I will have additional posts in the near future to discuss updates for Azure DSC Extension and Windows Pull Server.</p>
<p>Specifically:</p>
<ul>
<li>What is the relationship between the next version of DSC and PowerShell Core?</li>
<li>Will DSC be Open Source?</li>
<li>What does this mean for my skillset and my existing projects?</li>
</ul>
<p>We appreciate the continued feedback and look forward to working with the DSC community to make incremental improvements as we progress together.</p>
<h2>What Are We Trying to Achieve?</h2>
<p>The mission for DSC is to provide a platform for server configuration management that is maintained together with the community, releasing at an agile cadence, to meet the demands of hybrid cloud environments.</p>
<h2>Local Configuration Manager (LCM)</h2>
<p>LCM is the engine that runs DSC so it is a logical place for us to start work on a new version. For DSC in Windows, this shipped in Windows Server 2012 R2 and later and has been updated through the WMF release cycle.</p>
<p>The work going on by the DSC team since the last major update has been focused on making LCM a small, lightweight, cross-platform, and portable engine that can meet the requirements for cloud management capabilities long term. In fact, the new codebase is already in use by some of the Management services available in Azure such as <a href="https://azure.microsoft.com/en-us/updates/update-management-inventory-and-change-tracking-are-available-in-azure-automation/">Inventory and Change Tracking</a>, and is scaling to hundreds of thousands of servers.</p>
<p>The team’s plan is to make LCM an open source project in GitHub within the next 12 months. We want to make sure we are prepared when we reach that milestone. Our team has gained experience through management of many open source projects including the DSC Resource community and from shipping PowerShell Core as an open source language. We understand that the onramp to open source projects includes a complex set of requirements, so we can be respectful and responsive to community contributions. We are working through creation of the repository with the appropriate assets such as governance and documentation.  I will have more to share in a few months at the PowerShell Summit events happening around the world.</p>
<p>Initially, the new LCM would be distributed as compiled binaries via GitHub releases and through Azure Services. It will need to be installed on systems where the current DSC platform exists today, and we will need to offer conflict detection across versions.</p>
<p>To be crystal clear, we do not plan for LCM to require .NET, .NET Core, or PowerShell Core. The project is written in C++ and will be able to be compiled for multiple platforms.</p>
<h2>Provider Model</h2>
<p>The community has been providing valuable feedback regarding backward compatibility with existing DSC Resources. To deliver DSC provided by LCM, we anticipate a provider model with the ability to work with multiple languages.</p>
<p>To make sure we are not creating unnecessary work for community maintainers, the first implementation of the provider model for LCM will be Windows PowerShell. This means that in the future a new open source LCM would be able to manage configurations that include the existing community-maintained DSC Resources authored using Windows PowerShell. Our intention is that no changes to the resources will be required.</p>
<p>We also expect to have LCM providers for PowerShell Core, C++, and Python. These providers will introduce the ability to Get/Set/Test across Windows, Linux, and MacOS, by a common LCM.  Leveraging cross-platform languages, authors will have the opportunity to create DSC resources that can be used on multiple operating systems. For resources written in PowerShell Core, there are built-in Boolean variables $IsWindows, $IsLinux, and $IsMacOS that will simplify OS detection for resource authors.</p>
<h2>Feature Backlog</h2>
<p>The feedback in <a href="https://windowsserver.uservoice.com/forums/301869-powershell/filters/top?category_id=148047">User Voice</a> will not be lost as we transition to the new project. Examples of top requests include support for maintenance windows, intermediate state, sharing information between resources, and support for managed service accounts. These will be moved to GitHub to be the top items in the new DSC project and we will carry forward any existing work in these areas.</p>
<h2>What is The Impact?</h2>
<p>By following a provider model that can leverage Windows PowerShell and multiple other languages, we honor our commitment to existing versions of Windows, while introducing new choices such as the latest versions of PowerShell.  The development of your skillset around DSC and the investment you have made in custom resources will carry forward, while enabling more agility to releasing incremental updates and the features you have requested.</p>
<h2>Feedback</h2>
<p>We look forward to hearing your feedback and suggestions. Please leave blog comments here, or via Twitter using tag #PSDSC. I look forward to more in depth conversation in the <a href="https://powershell.org/forums/forum/dsc-desired-state-configuration/">DSC forum</a>, PowerShell User Groups, and the community-led PowerShell Summits in 2018.</p>
<p>&nbsp;</p>
<p>Michael Greene<br />
@migreene<br />
Principal Program Manager<br />
Microsoft PowerShell DSC and Azure Configuration Management</p>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2018/01/26/dsc-planning-update-january-2018/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>PowerShell Core 6.1 Roadmap</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2018/01/24/powershell-core-6-1-roadmap/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2018/01/24/powershell-core-6-1-roadmap/#comments</comments>
		<pubDate>Thu, 25 Jan 2018 01:09:05 +0000</pubDate>
		<dc:creator><![CDATA[Steve Lee [MSFT]]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13975</guid>
		<description><![CDATA[The release of PowerShell Core 6.0 is only the beginning and we are already thinking about the next leg of our journey. Most of the effort of the team with PowerShell Core 6.0 was in these areas: Learning how to work in an Open Source project (and we are still learning) Complete the port of PowerShell to... <a aria-label="read more about PowerShell Core 6.1 Roadmap" href="https://blogs.msdn.microsoft.com/powershell/2018/01/24/powershell-core-6-1-roadmap/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<p>The release of<span> </span><a href="https://blogs.msdn.microsoft.com/powershell/2018/01/10/powershell-core-6-0-generally-available-ga-and-supported/" rel="nofollow">PowerShell Core 6.0</a><span> </span>is only the beginning and we are already thinking about the next leg of our journey.</p>
<p>Most of the effort of the team with PowerShell Core 6.0 was in these areas:</p>
<ul>
<li>Learning how to work in an Open Source project (and we are still learning)</li>
<li>Complete the port of PowerShell to CoreCLR</li>
<li>Add test coverage for PowerShell Core</li>
<li>Build/integrate tooling for automating builds, packaging, test execution, and releases</li>
</ul>
<p>The community did some amazing work to add new capabilities in both the engine as well as cmdlets!</p>
<p>If you participated in the January 2018<span> </span><a href="https://github.com/PowerShell/PowerShell-RFC/tree/master/CommunityCall">Community Call</a><span> </span>you already got an early preview of this content.</p>
<h2>Timeline</h2>
<p>First, we&#8217;re publishing PowerShell Core 6.0.1 as a servicing release by the end of January in order to update to .NET Core 2.0.5.  There are no other changes in the 6.0.1 release.</p>
<p>After that, the plan going forward is to have new supported minor releases every 6 months.  This means that we&#8217;re targeting a late June,  early July 2018 release for PSCore 6.1.</p>
<p>We will continue to have preview releases approximately every 3 weeks.</p>
<p><a href="https://github.com/powershell/powershell-rfc">RFCs</a><span> </span>for new features we plan to deliver will be published in February.</p>
<h2>Milestone Quality</h2>
<p>There&#8217;s some work that we deferred and will be a focus to be completed in February:</p>
<ul>
<li>Complete PowerShell Standard SDK &#8211; including guidance on converting Windows PowerShell modules to portable modules that are also PowerShell Core compatible</li>
<li>Author documentation in the<span> </span><a href="https://github.com/powershell/powershell-docs">Docs Repo</a><span> </span>for issues/PRs labeled with<span> </span><a href="https://github.com/powershell/powershell/issues?utf8=%E2%9C%93&amp;q=label%3A%22Documentation+Needed%22+"><code>Documentation Needed</code></a></li>
<li>Backport changes in PowerShell Core 6.0 to Windows PowerShell 5.1 for issues/PRs labeled with<span> </span><a href="https://github.com/powershell/powershell/issues?utf8=%E2%9C%93&amp;q=label%3AConsider-WindowsPowerShell51+"><code>Consider-WindowsPowerShell51</code></a>
<ul>
<li>Note that depending on the risk of the change,<br />
even if an issue/PR has this labeled,<br />
it doesn&#8217;t guarantee it&#8217;ll be backported</li>
</ul>
</li>
<li>Enable automated test runs for all supported distros/platforms</li>
<li>Build infrastructure and tooling for cross system remoting tests</li>
<li>Have consistency and meet compliance requirements for the following repos:
<ul>
<li><a href="https://github.com/powershell/powershelleditorservices">PSEditorServices</a></li>
<li><a href="https://github.com/powershell/vscode-powershell">VSCode-PowerShell</a></li>
<li><a href="https://github.com/PowerShell/PSScriptAnalyzer">PSScriptAnalyzer</a></li>
<li><a href="https://github.com/PowerShell/Microsoft.PowerShell.Archive">Archive Module</a></li>
<li><a href="https://github.com/PowerShell/psl-omi-provider">PSRP WSMan Client for non-Windows</a></li>
</ul>
</li>
</ul>
<h2>New Features</h2>
<p>Being an open source project means that different people can invest in different priorities and submit their changes via pull requests,  these are the areas that the PowerShell team will be focusing on.  Some of these will be complete while others may be just the start of something bigger.</p>
<h3>Security Parity with Windows PowerShell</h3>
<p>The original port of PowerShell stubbed out support for<span> </span><a href="https://docs.microsoft.com/en-us/windows/device-security/device-guard/introduction-to-device-guard-virtualization-based-security-and-code-integrity-policies" rel="nofollow">DeviceGuard</a>/<a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd759117(v=ws.11)" rel="nofollow">AppLocker</a><span> </span>because those APIs were not available on<span> </span><a href="https://docs.microsoft.com/en-us/windows-server/get-started/getting-started-with-nano-server" rel="nofollow">Nano Server</a>.  This work will ensure that DeviceGuard/AppLocker policies are enforced in PowerShell Core 6.0 on Windows systems.</p>
<h3>Run Signed Script Blocks Remotely</h3>
<p>PowerShell supports restricting access using<span> </span><a href="https://blogs.msdn.microsoft.com/powershell/2017/11/02/powershell-constrained-language-mode/" rel="nofollow">constrained language mode</a><span> </span>and only allowing signed scripts with a trusted certificate to run with<span> </span><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_modes?view=powershell-6" rel="nofollow">Full Language mode</a>.  This new capability will allow using<span> </span><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-6" rel="nofollow"><code>Invoke-Command</code></a><span> </span>to remotely execute a signed script block on a target locked down system with Full Language mode.</p>
<h3>Windows PowerShell Compatibility Pack</h3>
<p>With the announcement of the<span> </span><a href="https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/" rel="nofollow">Windows Compatibility Pack for .NET Core</a> for .NET Core, PowerShell Core will regain some APIs that had been dropped in the transition to .NET Core.  This means we can re-enable some cmdlets that weren&#8217;t part of the PowerShell Core 6.0 release: WMI, EventLog, and PerfCounters.  In addition, some highly requested APIs will be available which means that some existing Windows PowerShell modules might just work in PowerShell Core 6.0.  This module will replace the<span> </span><a href="https://www.powershellgallery.com/packages/WindowsPSModulePath/1.0.0" rel="nofollow">WindowsPSModulePath</a><span> </span>module to add the Windows PowerShell<span> </span><code>$env:PSModulePath</code><span> </span>to PowerShell Core 6.0.  Finally, we can use this module to optionally add back some aliases that we removed from PowerShell Core 6.0 that exist in Windows PowerShell.</p>
<h3>Concurrency in PowerShell Script</h3>
<p>You can do threading today in PowerShell using<span> </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.runspace?view=pscore-6.0.0" rel="nofollow">runspaces</a>, however, it may be complex for some users.  Rather than spend time creating something from scratch, we&#8217;re evaluating two existing modules that might already meet our needs:</p>
<ul>
<li><a href="https://github.com/PaulHigin/PSThreadJob">PSThreadJob</a><span> </span>created by one of engineers on my team,<span> </span><a href="https://github.com/PaulHigin">Paul</a></li>
<li><a href="https://github.com/proxb/PoshRSJob">PoshRSJob</a><span> </span>created by a PowerShell MVP,<span> </span><a href="https://github.com/proxb">Boe</a></li>
</ul>
<h3>PSReadLine 2.0 GA</h3>
<p><a href="https://www.powershellgallery.com/packages/PSReadLine" rel="nofollow">PSReadLine</a><span> </span>is our default interactive experience on Windows PowerShell 5.1 and PowerShell Core 6.0.  This is a side project by<span> </span><a href="https://github.com/lzybkr">Jason Shirk</a><span> </span>who recently put out a<span> </span><a href="https://github.com/lzybkr/PSReadLine/releases/tag/v2.0.0-beta1">Beta1</a><span> </span>release of 2.0. Some of my engineers will be spending time contributing to this project to get it to production quality so we can include it in PowerShell Core 6.0.</p>
<h3>Machine Learning and PowerShell</h3>
<p>A new area that we want to explore is leveraging the cloud and machine learning to provide inline suggestions at the interactive command-line.  The two primary scenarios I want to target is to support both local and cloud based suggestions. This is a completely new area for the team so expect the initial release to be limited, but something we can build upon going forward.</p>
<p>An RFC will be published for this feature.</p>
<h3>Experimental Feature Flags</h3>
<p>As we build new capabilities, some features may not be fully complete where we don&#8217;t have sufficient community feedback. Being experimental, we may make large design changes that would not be backwards compatible. Users can choose to not use these features by not opting into turning on these feature flags.  Feature flags can also allow us to have two different implementations of the same feature (that could not work side-by-side) and collect feedback that way.</p>
<p>An RFC will be published for this feature.</p>
<h3>HelpSystem as a Module</h3>
<p>This is the start of a bigger work item to componentize PowerShell so that we can have a smaller distribution of PowerShell Core for managed targets that don&#8217;t need all of the interactive experience components.</p>
<p>PowerShell help content today is written in XML.  However, our<span> </span><a href="https://github.com/PowerShell/PowerShell-Docs">docs</a><span> </span>are maintained as<span> </span><a href="https://guides.github.com/features/mastering-markdown/">Markdown</a> and we have<span> </span><a href="https://github.com/powershell/platyps">platyPS</a><span> </span>that converts the Markdown to XML.  We want to remove the need to convert to XML and have the HelpSystem use Markdown natively.  After this work is done, the help system would still be included with the general distribution of PowerShell Core as an independent module.</p>
<p>An RFC for this has already been<span> </span><a href="https://github.com/PowerShell/PowerShell-RFC/pull/102">published</a>.</p>
<h3>Markdown Rendering Support</h3>
<p>In addition to help being in Markdown natively, we would like to be able to render in the console any Markdown.  For example, error messages or script output can leverage Markdown to provide emphasis.  Initially there will be limited rendering support, but this is something we can improve over time.  For example, eventually supporting plug-able syntax highlighting for code fencing.</p>
<p>An RFC will be published for this feature.</p>
<h3>Enable<span> </span><code>sudo</code><span> </span>to Work Over PowerShell Remoting (for non-Windows)</h3>
<p>On Unix-based systems, administrators use<span> </span><code>sudo</code><span> </span>to elevate themselves to run administrator tasks requiring higher privilege.  Due to how<span> </span><code>sudo</code><span> </span>works, PowerShell remoting is not able to pass the request for the administrator password prompt from<span> </span><code>sudo</code>.  Note that<span> </span><code>sudo</code><span> </span>works perfectly fine locally in PowerShell Core 6.0.</p>
<h3>Enable-SSHRemoting</h3>
<p>PowerShell includes a<span> </span><code>Enable-PSRemoting</code><span> </span>command on Windows to make it easy to enable PowerShell remoting over WSMan using WinRM.  This feature adds a new<span> </span><code>Enable-SSHRemoting</code><span> </span>command that would initially identify missing dependencies (like OpenSSH) and also configure sshd_config to enable PowerShell remoting over SSH.</p>
<p>An RFC for this has already been<span> </span><a href="https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0012-Enable-SSH-Remoting.md">published</a>.</p>
<h3>PowerShell Module for IoT (Internet of Things)</h3>
<p>PowerShell Core 6.0 has experimental support for ARM systems running<span> </span><a href="https://developer.microsoft.com/en-us/windows/iot" rel="nofollow">Windows 10 IoT</a><span> </span>or<span> </span><a href="https://www.raspberrypi.org/blog/raspbian-stretch/" rel="nofollow">Raspbian (Stretch)</a>.</p>
<p>To help bootstrap the community to develop more interesting uses for IoT using PowerShell, we want to provide the start of a module to enable using PowerShell script to interact with sensors attached to your IoT device.  We would then work with the community to increase capability of this module over time.</p>
<p>An RFC will be published for this feature.</p>
<h2>Closing</h2>
<p>As you can see, we have a large set of work ahead of us for the 6.1 release.</p>
<p>The feature set was decided based on:</p>
<ul>
<li>Existing customer feedback or known customer pain points</li>
<li>Driving towards longer goals through strategic investments</li>
<li>Specific partner/customer asks</li>
<li>Interests within the PSCore engineering team</li>
</ul>
<p>The next 6 months will be lots of work, but it&#8217;ll also be fun.  I also expect the community to continue to contribute new features beyond this list for 6.1.  My team will continue to fix bugs, respond to issues, review PRs, and merge PRs while working on 6.1.</p>
<p>Please feel free to provide<span> </span><a href="https://github.com/PowerShell/PowerShell/issues/6015">feedback</a><span> </span>on the PowerShell Core 6.1 Roadmap via GitHub!</p>
<p>Steve Lee<br />
Principal Engineering Manager<br />
PowerShell</p>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2018/01/24/powershell-core-6-1-roadmap/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>PowerShell Core 6.0: Generally Available (GA) and Supported!</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2018/01/10/powershell-core-6-0-generally-available-ga-and-supported/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2018/01/10/powershell-core-6-0-generally-available-ga-and-supported/#comments</comments>
		<pubDate>Wed, 10 Jan 2018 22:22:10 +0000</pubDate>
		<dc:creator><![CDATA[Joey Aiello [MSFT]]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[.net core]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[macos]]></category>
		<category><![CDATA[Open Source]]></category>
		<category><![CDATA[PowerShell]]></category>
		<category><![CDATA[SSH]]></category>
		<category><![CDATA[windows]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13955</guid>
		<description><![CDATA[PowerShell Core 6.0 is a new edition of PowerShell that is cross-platform (Windows, macOS, and Linux), open-source, and built for heterogeneous environments and the hybrid cloud. First and foremost, thank you to all of our amazing community, especially our open-source contributors (the most recent of which you can find on our community dashboard at https://aka.ms/PSGitHubBI)... <a aria-label="read more about PowerShell Core 6.0: Generally Available (GA) and Supported!" href="https://blogs.msdn.microsoft.com/powershell/2018/01/10/powershell-core-6-0-generally-available-ga-and-supported/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<div class="markdown-body">
<p><a href="https://github.com/PowerShell/Powershell">PowerShell Core 6.0</a> is a new edition of PowerShell that is cross-platform (Windows, macOS, and Linux), open-source, and built for heterogeneous environments and the hybrid cloud.</p>
<p>First and foremost, thank you to all of our amazing community, especially our open-source contributors (the most recent of which you can find on our community dashboard at <a href="https://msit.powerbi.com/view?r=eyJrIjoiYTYyN2U3ODgtMjBlMi00MGM1LWI0ZjctMmQ3MzE2ZDNkMzIyIiwidCI6IjcyZjk4OGJmLTg2ZjEtNDFhZi05MWFiLTJkN2NkMDExZGI0NyIsImMiOjV9&amp;pageName=ReportSection5&amp;pageName=ReportSection3" rel="nofollow">https://aka.ms/PSGitHubBI</a>) for donating your time and energy to PowerShell Core. Whether you contributed code, tests, documentation, issues, or even just your feedback and opinions, we are extremely grateful for the sweat and tears that you&#8217;ve invested in PowerShell. (For those interested in contributing, hop and over to our <a href="https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md">Contribution Guide</a> on GitHub. You don&#8217;t have to be a guru to help out!)</p>
<h2>FAQ</h2>
<h3>Where do I get PowerShell Core 6.0?</h3>
<p>To download PowerShell Core on Windows, see <a href="https://aka.ms/getps6-windows" rel="nofollow">https://aka.ms/getps6-windows</a>.<br />
To download PowerShell Core on macOS and Linux, see <a href="https://aka.ms/getps6-linux" rel="nofollow">https://aka.ms/getps6-linux</a>.</p>
<h3>I already had PowerShell Core on my Linux machine, and it&#8217;s not updating. How do I get the latest version?</h3>
<p>We&#8217;re currently working through a known issue where powershell-6.0.0 is viewed by package managers as a lower version than powershell-6.0.0-rc2.</p>
<p>In the meantime, a clean install will get you the latest version:</p>
<p><code>sudo apt remove powershell &amp;&amp; sudo apt-get install powershell</code></p>
<p><code>sudo yum remove powershell &amp;&amp; sudo yum install powershell</code></p>
<h3>What&#8217;s the difference between Windows PowerShell and PowerShell Core?</h3>
<p>There are now two editions of PowerShell:</p>
<p><strong>Windows PowerShell</strong> is the edition of PowerShell built on top of .NET Framework<br />
(sometimes referred to as &#8220;FullCLR&#8221;):</p>
<ul>
<li>This is the PowerShell that has been in widespread use for the last ~10 years.</li>
<li>Because of it&#8217;s dependency on the .NET Framework, Windows PowerShell is only available on Windows (hence the name).</li>
<li>The released versions of Windows PowerShell include 1.0, 2.0, 3.0, 4.0, 5.0, and 5.1.</li>
<li>Windows PowerShell is available as a built-in component in Windows client and Windows Server.</li>
<li>Windows PowerShell is launched as <code>powershell.exe</code>.</li>
<li>On Windows PowerShell 5.0/5.1, <code>$PSVersionTable.PSEdition</code> is set to <code>Desktop</code>.</li>
<li>Any usage of .NET-based functionality (e.g. C# cmdlets, <code>Add-Type</code>, and the invocation of static .NET Methods), relies on the .NET Framework runtime. This means Windows PowerShell&#8217;s .NET usage is limited to the functionality exposed by the .NET Framework and .NET Standard.</li>
<li>Continues to be supported via critical bug fixes in the newest releases of Windows and Windows Server</li>
</ul>
<p><strong>PowerShell Core</strong> is the edition of PowerShell built on top of .NET Core<br />
(sometimes simplified to &#8220;CoreCLR&#8221;).</p>
<ul>
<li>PowerShell Core is cross-platform, available on Windows, macOS, and Linux, thanks to the cross-platform nature of .NET Core.</li>
<li>PowerShell Core is launched as <code>pwsh.exe</code> on Windows and <code>pwsh</code> on macOS and Linux</li>
<li>On PowerShell Core, <code>$PSVersionTable.PSEdition</code> is set to <code>Core</code>.<br />
Note: while PowerShell Core 6.0 is cross-platform, there is also a PowerShell Core 5.0/5.1 released exclusively as part of Microsoft Nano Server.</li>
<li>Any usage of .NET-based functionality (e.g. C# cmdlets, <code>Add-Type</code>, and the invocation of static .NET Methods), relies on the .NET Core runtime. This means PowerShell Core is limited to the functionality exposed by .NET Core and .NET Standard.</li>
</ul>
<h3>What platforms are supported?</h3>
<p>PowerShell Core is officially supported on the following platforms:</p>
<ul>
<li>Windows 7, 8.1, and 10</li>
<li>Windows Server 2008 R2, 2012 R2, 2016</li>
<li><a href="https://docs.microsoft.com/windows-server/get-started/semi-annual-channel-overview" rel="nofollow">Windows Server Semi-Annual Channel</a></li>
<li>Ubuntu 14.04, 16.04, and 17.04</li>
<li>Debian 8.7+, and 9</li>
<li>CentOS 7</li>
<li>Red Hat Enterprise Linux 7</li>
<li>OpenSUSE 42.2</li>
<li>Fedora 25, 26</li>
<li>macOS 10.12+</li>
</ul>
<p>Our community has also contributed packages for the following platforms,<br />
but they are not officially supported:</p>
<ul>
<li>Arch Linux</li>
<li>Kali Linux</li>
<li>AppImage (works on multiple Linux platforms)</li>
</ul>
<p>We also have experimental (unsupported) releases for the following platforms:</p>
<ul>
<li>Windows on ARM32/ARM64</li>
<li>Raspbian (Stretch)</li>
</ul>
<h3>What&#8217;s new in PowerShell Core? Why should I use it?</h3>
<p>Check out <a href="https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-core-60?view=powershell-6" rel="nofollow">What&#8217;s New in PowerShell Core 6.0</a> for a complete list!</p>
<h3>Does PowerShell Core affect my Windows PowerShell installation?</h3>
<p>Nope! PowerShell Core is completely side-by-side with Windows PowerShell. In fact, an awesome feature of PowerShell Core is that you can test new versions without affecting existing workloads. Whether it&#8217;s installed via an MSI or installed portably from the ZIP package, your Windows PowerShell installation is not affected by PowerShell Core.</p>
<h3>What modules work with PowerShell Core?</h3>
<p>Today, we ship the following set of &#8220;built-in&#8221; modules as part of PowerShell Core:</p>
<ul>
<li>CimCmdlets</li>
<li>Microsoft.PowerShell.Archive</li>
<li>Microsoft.PowerShell.Diagnostics</li>
<li>Microsoft.PowerShell.Host</li>
<li>Microsoft.PowerShell.Management</li>
<li>Microsoft.PowerShell.Security</li>
<li>Microsoft.PowerShell.Utility</li>
<li>Microsoft.WSMan.Management</li>
<li>PackageManagement</li>
<li>PowerShellGet</li>
<li>PSDesiredStateConfiguration</li>
<li>PSDiagnostics</li>
<li>PSReadLine</li>
</ul>
<p>You can browse the reference for these modules via the <a href="https://docs.microsoft.com/en-us/powershell/module/?view=powershell-6" rel="nofollow">PowerShell Module Browser</a>. To see the commands available in these modules you can run <code>Get-Command</code>:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Get-Command</span> <span class="pl-k">-</span>Module Microsoft.PowerShell.Management</pre>
</div>
<p>Some cmdlets that shipped as part of these modules in Windows PowerShell are not available today in PowerShell Core. For a complete list of these cmdlets, the most up-to-date list is currently maintained in <a href="https://github.com/PowerShell/PowerShell/blob/master/test/powershell/engine/Basic/DefaultCommands.Tests.ps1">this cmdlet discovery test</a>.</p>
<h3>What about other 1st-party Microsoft modules?</h3>
<p>1st-party Microsoft modules are generally in one of three categories:</p>
<ul>
<li>Modules that ship as part of Windows client or Windows Server:<br />
these are the modules you see after installing Windows and running <code>Get-Module -ListAvailable</code> (less the modules that in the &#8220;built-in&#8221; list above).</li>
<li>Modules that ship as a part of a Microsoft product. For example, System Center applications include PowerShell modules as part of their installation.</li>
<li>Modules that ship on the PowerShell Gallery. For example, <a href="https://docs.microsoft.com/powershell/azure/install-azurermps-maclinux" rel="nofollow">Azure PowerShell</a> is delivered via the Gallery.</li>
</ul>
<p>For all of these categories, unless a module is explicitly supported in PowerShell Core by Windows or by the product group, there is no guarantee that it will work with PowerShell Core.</p>
<p>However, because of the guarantees of .NET Standard and CDXML,<br />
many modules designed for Windows PowerShell are highly compatible with PowerShell Core. For more information on how to add Windows PowerShell modules to your <code>PSModulePath</code> for usage in PowerShell Core,<br />
see <a href="https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-core-60?view=powershell-6#backwards-compatibility-with-windows-powershell" rel="nofollow">Backwards compatibility with Windows PowerShell</a>.</p>
<h3>How do I know which modules on the PowerShell Gallery work with PowerShell Core?</h3>
<p>The <a href="https://powershellgallery.com" rel="nofollow">PowerShell Gallery</a> is the community repository for PowerShell modules.</p>
<p>You can find modules that have been tagged with PowerShell Core support by <a href="https://www.powershellgallery.com/items?q=Tags%3A%22PSEdition_Core%22" rel="nofollow">searching for the tag <code>PSEdition_Core</code></a>.</p>
<p>You can learn more about PSEditions on the Gallery with our doc on <a href="https://docs.microsoft.com/en-us/powershell/gallery/psgallery/psgallery_pseditions" rel="nofollow">Items with compatible PowerShell Editions</a></p>
<h3>How do I build modules and scripts that are compatible with PowerShell Core?</h3>
<p>If you&#8217;re building a C#-based cmdlet, you should build your cmdlets against <a href="https://github.com/dotnet/standard/blob/master/docs/faq.md">.NET Standard 2.0</a> and <a href="https://www.nuget.org/packages/PowerShellStandard.Library/3.0.0-preview-01" rel="nofollow">PowerShell Standard</a>. For more info on how to do this, check out:</p>
<ul>
<li><a href="https://github.com/PowerShell/PowerShell/blob/master/docs/cmdlet-example/command-line-simple-example.md">Creating a cross-platform binary module with the .NET Core command-line interface tools</a></li>
<li><a href="https://github.com/PowerShell/PowerShell/blob/master/docs/cmdlet-example/visual-studio-simple-example.md">Building a C# Cmdlet with Visual Studio</a></li>
</ul>
<p>Note: PowerShell Standard is currently in preview with a 3.0 version for PowerShell versions 3 through 6. We will soon have a version 5.0 that supports a wider set of APIs included PowerShell versions 5 through 6.</p>
<p>If you&#8217;re building a PowerShell-based cmdlet or script, you should make sure you&#8217;re using .NET types/assemblies, and that you&#8217;re using cmdlets and modules available on the platform you&#8217;re targeting. We&#8217;ll be adding <a href="https://github.com/PowerShell/PSScriptAnalyzer">PSScriptAnalyzer</a> rules soon that will help you target sets of operating systems and PowerShell editions/versions.</p>
<h3>Can I host PowerShell Core in a .NET Core application?</h3>
<p>Absolutely! For more information, check out this doc on <a href="https://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell">Hosting PowerShell Core in .NET Core Applications</a>.</p>
<h3>Does PowerShell Core support remoting?</h3>
<p>Yes! PowerShell Core supports remoting over the PowerShell Remoting Protocol (PSRP) via both WSMan and SSH, and is interoperable with Windows PowerShell over WSMan. However, some authentication types are not supported for WSMan-based remoting clients on non-Windows platforms. Also, hosting a WSMan-based server on non-Windows platforms is still currently an experimental scenario.</p>
<p>For more information on setting this up, see:</p>
<ul>
<li><a href="https://docs.microsoft.com/powershell/scripting/core-powershell/SSH-Remoting-in-PowerShell-Core?view=powershell-6">SSH Remoting in PowerShell Core</a></li>
<li><a href="https://docs.microsoft.com/powershell/scripting/core-powershell/WSMan-Remoting-in-PowerShell-Core?view=powershell-6">WSMan Remoting in PowerShell Core</a></li>
</ul>
<h3>How is PowerShell Core supported?</h3>
<p>PowerShell Core is adopting the <a href="https://support.microsoft.com/help/30881/modern-lifecycle-policy" rel="nofollow">Microsoft Modern Lifecycle Policy</a>, a new support lifecycle intended to keep customers up-to-date with the latest versions.</p>
<p>In general, Microsoft support agreements cover support for PowerShell Core. You can read more about the specifics of this policy and how it applies to PowerShell Core at <a href="https://aka.ms/pslifecycle" rel="nofollow">https://aka.ms/pslifecycle</a>.</p>
<h3>What&#8217;s missing from PowerShell Core?</h3>
<p>As part of the move to .NET Core and other operating systems,<br />
we were forced to leave behind some technologies that were being used by Windows PowerShell.</p>
<p>In other cases, we took the opportunity of PowerShell being refactored to stop supporting lesser used technologies. Some of these technologies may eventually return to PowerShell Core, but many will not.</p>
<p>At a high-level, these include:</p>
<ul>
<li>PowerShell Workflows</li>
<li>PowerShell Snap-ins</li>
<li>WMIv1 cmdlets (<code>Get-WmiObject</code>, <code>Invoke-WmiMethod</code>, etc.)
<ul>
<li>We recommend using the CIM/WMIv2 cmdlets <code>(Get-CimInstance</code>, <code>Invoke-CimMethod</code>, etc.)</li>
</ul>
</li>
<li>Executing Desired State Configuration (DSC) resources using PowerShell Core</li>
</ul>
<p>We&#8217;ve also made a longer tail of small changes to the PowerShell language, engine, and cmdlets that technically qualify as breaking changes.</p>
<p>For more information on why we made these changes/removals, see our document on <a href="https://github.com/PowerShell/PowerShell/tree/master/docs/BREAKINGCHANGES.md">Breaking Changes in PowerShell Core</a>.</p>
<h3>What&#8217;s happening to Windows PowerShell?</h3>
<p>The short answer is that it&#8217;s still useful and supported!</p>
<p>Windows PowerShell 3.0, 4.0, and 5.1 will continue to be supported on <a href="https://support.microsoft.com/en-us/help/13853/windows-lifecycle-fact-sheet" rel="nofollow">supported versions of Windows and Windows Server</a>.<br />
(Note: While Windows PowerShell 2.0 is still in support, <a href="https://blogs.msdn.microsoft.com/powershell/2017/08/24/windows-powershell-2-0-deprecation/" rel="nofollow">it has been deprecated</a>, and it&#8217;s recommend that workloads be migrated to newer versions of PowerShell.)</p>
<p>However, there are currently no plans to introduce new functionality to Windows PowerShell. This means that the risk of regression will be very low for Windows PowerShell, so you can count on it as a stable platform for your existing workloads. There are also no plans to provide a new Windows Management Framework (WMF) package for downlevel operating systems.</p>
<h3>Where can I provide feedback?</h3>
<p>First, we&#8217;re having an &#8220;Ask Me Anything&#8221; (AMA) with Jeffrey Snover and the PowerShell Team at <a href="https://aka.ms/powershellama" rel="nofollow">https://aka.ms/powershellama</a> on Microsoft Tech Communities on Thursday, January 11th at 9:00 AM PST (GMT-8).</p>
<p>You can also <a href="https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#contributing-to-issues">file issues</a> on GitHub where we track, prioritize, and discus all our work on PowerShell Core. We&#8217;re usually very good about responding to issues there, as are many of the contributors outside Microsoft that help out in our repository.</p>
<h3>Thanks!</h3>
<p>Thanks again to everyone for all the contributions and support. I hope you enjoy PowerShell Core 6.0 as much as we do.</p>
<p>Joey Aiello<br />
Program Manager, PowerShell</p>
</div>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2018/01/10/powershell-core-6-0-generally-available-ga-and-supported/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>DSC Resource Kit Release December 2017</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2017/12/20/dsc-resource-kit-release-december-2017/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2017/12/20/dsc-resource-kit-release-december-2017/#respond</comments>
		<pubDate>Thu, 21 Dec 2017 00:18:39 +0000</pubDate>
		<dc:creator><![CDATA[Katie Keim [MSFT]]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[DSC]]></category>
		<category><![CDATA[DSC Resource Kit]]></category>
		<category><![CDATA[DSC Resources]]></category>
		<category><![CDATA[Resources]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13895</guid>
		<description><![CDATA[We just released the DSC Resource Kit! This release includes updates to 16 DSC resource modules. In these past 5 weeks, 68 pull requests have been merged and 59 issues have been closed, all thanks to our amazing community! The modules updated in this release are: OfficeOnlineServerDsc SecurityPolicyDsc SharePointDsc SqlServerDsc (previously xSqlServer) SystemLocaleDsc xAdcsDeployment xCertificate... <a aria-label="read more about DSC Resource Kit Release December 2017" href="https://blogs.msdn.microsoft.com/powershell/2017/12/20/dsc-resource-kit-release-december-2017/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<div class="markdown-body">
<p>We just released the DSC Resource Kit!</p>
<p>This release includes updates to <strong>16 DSC resource modules</strong>. In these past 5 weeks, <strong>68 pull requests</strong> have been merged and <strong>59 issues</strong> have been closed, all thanks to our amazing community!</p>
<p>The modules updated in this release are:</p>
<ul>
<li>OfficeOnlineServerDsc</li>
<li>SecurityPolicyDsc</li>
<li>SharePointDsc</li>
<li>SqlServerDsc (previously xSqlServer)</li>
<li>SystemLocaleDsc</li>
<li>xAdcsDeployment</li>
<li>xCertificate</li>
<li>xComputerManagement</li>
<li>xExchange</li>
<li>xHyper-V</li>
<li>xNetworking</li>
<li>xPowerShellExecutionPolicy</li>
<li>xRemoteDesktopSessionHost</li>
<li>xStorage</li>
<li>xSystemSecurity</li>
<li>xTimeZone</li>
</ul>
<p>For a detailed list of the resource modules and fixes in this release, see the Included in this Release section below.</p>
<p>Our last <strong>community call</strong> for the DSC Resource Kit was today on December 20. A recording of our updates as well as summarizing notes will be available soon. Join us for the next call at 12PM (Pacific time) on January 31 to ask questions and give feedback about your experience with the DSC Resource Kit.</p>
<p>We strongly encourage you to update to the newest version of all modules using the PowerShell Gallery, and don&#8217;t forget to give us your feedback in the comments below, on GitHub, or on Twitter (<a href="https://twitter.com/PowerShell_Team" rel="nofollow">@PowerShell_Team</a>)!</p>
<p>All resources with the &#8216;x&#8217; prefix in their names are still experimental &#8211; this means that those resources are provided AS IS and are not supported through any Microsoft support program or service. If you find a problem with a resource, please <a href="https://github.com/PowerShell/DscResources/blob/master/CONTRIBUTING.md#submitting-an-issue">file an issue</a> on GitHub.</p>
<h2>Included in this Release</h2>
<p>You can see a detailed summary of all changes included in this release in the table below. For past release notes, go to the README.md or Changelog.md file on the GitHub repository page for a specific module (see the How to Find DSC Resource Modules on GitHub section below for details on finding the GitHub page for a specific module).</p>
<table>
<thead>
<tr>
<th>Module Name</th>
<th>Version</th>
<th>Release Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>OfficeOnlineServerDsc</td>
<td>1.1.0.0</td>
<td>
<ul>
<li>Added support for Language Packs installation;</li>
</ul>
</td>
</tr>
<tr>
<td>SecurityPolicyDsc</td>
<td>2.2.0.0</td>
<td>
<ul>
<li>Fixed bug in UserRightAssignment where Get-DscConfiguration would fail if it returns $Identity as single string</li>
</ul>
</td>
</tr>
<tr>
<td>SharePointDsc</td>
<td>2.0.0.0</td>
<td>
<ul>
<li>General
<ul>
<li>Added VSCode workspace settings to meet coding guidelines</li>
<li>Corrected comment in CodeCov.yml</li>
<li>Fixed several PSScriptAnalyzer warnings</li>
</ul>
</li>
<li>SPAppManagementServiceApp
<ul>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPBCSServiceApp
<ul>
<li>Added custom Proxy Name support</li>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPBlobCacheSettings
<ul>
<li>Update to set non-default or missing blob cache properties</li>
</ul>
</li>
<li>SPContentDatabase
<ul>
<li>Fixed localized issue</li>
</ul>
</li>
<li>SPDesignerSettings
<ul>
<li>Fixed issue where URL with capitals were not accepted correctly</li>
</ul>
</li>
<li>SPDistributedCacheService
<ul>
<li>Fixed issue where reprovisioning the Distributed Cache did not work</li>
</ul>
</li>
<li>SPFarm
<ul>
<li>Implemented ToDo to return Central Admin Auth mode</li>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPInstall
<ul>
<li>Updated to document the requirements for an English ISO</li>
</ul>
</li>
<li>SPInstallPrereqs
<ul>
<li>Updated to document which parameter is required for which version of SharePoint</li>
<li>Added SharePoint 2016 example</li>
</ul>
</li>
<li>SPLogLevel
<ul>
<li>New resource</li>
</ul>
</li>
<li>SPMachineTranslationServiceApp
<ul>
<li>Added custom Proxy Name support</li>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPManagedMetadataAppDefault
<ul>
<li>New resource</li>
</ul>
</li>
<li>SPManagedMetadataServiceApp
<ul>
<li>Update to allow the configuration of the default and working language</li>
<li>Fixed issue where the termstore could not be retrieved if the MMS service instance was stopped</li>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPMinRoleCompliance
<ul>
<li>New resource</li>
</ul>
</li>
<li>SPPerformancePointServiceApp
<ul>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPProjectServer
<ul>
<li>New resources to add Project Server 2016 support: SPProjectServerLicense, SPProjectServerAdditionalSettings, SPProjectServerADResourcePoolSync, SPProjectServerGlobalPermissions, SPProjectServerGroup, SPProjectServerTimeSheetSettings, SPProjectServerUserSyncSettings, SPProjectServerWssSettings</li>
</ul>
</li>
<li>SPSearchContentSource
<ul>
<li>Fixed examples</li>
</ul>
</li>
<li>SPSearchIndexPartition
<ul>
<li>Fixed to return the RootFolder parameter</li>
</ul>
</li>
<li>SPSearchServiceApp
<ul>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPSearchTopology
<ul>
<li>Updated to better document how the resource works</li>
<li>Fixed issue to only return first index partition to prevent conflicts with SPSearchIndexPartition</li>
</ul>
</li>
<li>SPSecureStoreServiceApp
<ul>
<li>Fixed issue with not returning AuditEnabled parameter in Get method</li>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPServiceAppSecurity
<ul>
<li>Fixed issue with NullException when no accounts are configured in SharePoint</li>
</ul>
</li>
<li>SPStateServiceApp
<ul>
<li>Added custom Proxy Name support</li>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPSubscriptionSettings
<ul>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPTrustedRootAuthority
<ul>
<li>Updated to enable using private key certificates.</li>
</ul>
</li>
<li>SPUsageApplication
<ul>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPUserProfileProperty
<ul>
<li>Fixed two NullException issues</li>
</ul>
</li>
<li>SPUserProfileServiceApp
<ul>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPUserProfileSynConnection
<ul>
<li>Fix an issue with ADImportConnection</li>
</ul>
</li>
<li>SPWeb
<ul>
<li>Update to allow the management of the access requests settings</li>
</ul>
</li>
<li>SPWebAppGeneralSettings
<ul>
<li>Added DefaultQuotaTemplate parameter</li>
</ul>
</li>
<li>SPWebApplicationExtension
<ul>
<li>Update to fix how property AllowAnonymous is returned in the hashtable</li>
</ul>
</li>
<li>SPWebAppPeoplePickerSettings
<ul>
<li>New resource</li>
</ul>
</li>
<li>SPWebAppPolicy
<ul>
<li>Fixed issue where the SPWebPolicyPermissions couldn&#8217;t be used twice with the exact same values</li>
</ul>
</li>
<li>SPWebAppSuiteBar
<ul>
<li>New resource</li>
</ul>
</li>
<li>SPWebApplication.Throttling
<ul>
<li>Fixed issue with where the RequestThrottling parameter was not applied</li>
</ul>
</li>
<li>SPWordAutomationServiceApp
<ul>
<li>Fixed an issue where the instance name wasn&#8217;t detected correctly</li>
</ul>
</li>
<li>SPWorkflowService
<ul>
<li>New resource</li>
</ul>
</li>
</ul>
<p>The following changes will break 1.x configurations that use these resources:</p>
<ul>
<li>SPAlternateUrl
<ul>
<li>Added the Internal parameter, which implied a change to the key parameters</li>
</ul>
</li>
<li>SPCreateFarm
<ul>
<li>Removed resource, please update your configurations to use SPFarm. See <a href="http://aka.ms/SPDsc-SPFarm" rel="nofollow">http://aka.ms/SPDsc-SPFarm</a> for details.</li>
</ul>
</li>
<li>SPJoinFarm
<ul>
<li>Removed resource, please update your configurations to use SPFarm. See <a href="http://aka.ms/SPDsc-SPFarm" rel="nofollow">http://aka.ms/SPDsc-SPFarm</a> for details.</li>
</ul>
</li>
<li>SPManagedMetadataServiceApp
<ul>
<li>Changed implementation of resource. This resource will not set any defaults for the keyword and site collection term store. The new resource SPManagedMetadataServiceAppDefault has to be used for this setting.</li>
</ul>
</li>
<li>SPShellAdmin
<ul>
<li>Updated so it also works for non-content databases</li>
</ul>
</li>
<li>SPTimerJobState
<ul>
<li>Updated to make the WebAppUrl parameter a key parameter. The resource can now be used to configure the same job for multiple web applications. Also changed the Name parameter to TypeName, due to a limitation with the SPTimerJob cmdlets</li>
</ul>
</li>
<li>SPUserProfileProperty
<ul>
<li>Fixed an issue where string properties were not created properly</li>
</ul>
</li>
<li>SPUSerProfileServiceApp
<ul>
<li>Updated to remove the requirement for CredSSP</li>
</ul>
</li>
<li>SPUserProfileSyncService
<ul>
<li>Updated to remove the requirement for CredSSP</li>
</ul>
</li>
<li>SPWebAppAuthentication
<ul>
<li>New resource</li>
</ul>
</li>
<li>SPWebApplication
<ul>
<li>Changed implementation of the Web Application authentication configuration. A new resource has been added and existing properties have been removed</li>
</ul>
</li>
<li>SPWebApplicationExtension
<ul>
<li>Updated so it infers the UseSSL value from the URL</li>
<li>Changed implementation of the Web Application authentication configuration. A new resource has been added and existing properties have been removed</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>SqlServerDsc (previously xSqlServer)</td>
<td>10.0.0.0</td>
<td>
<ul>
<li>BREAKING CHANGE: Resource module has been renamed to SqlServerDsc (<a href="https://github.com/PowerShell/SqlServerDsc/issues/916">issue 916</a>).</li>
<li>BREAKING CHANGE: Significant rename to reduce length of resource names
<ul>
<li>See <a href="https://github.com/PowerShell/SqlServerDsc/issues/851">issue 851</a> for a complete table mapping rename changes.</li>
<li>Impact to all resources.</li>
</ul>
</li>
<li>Changes to CONTRIBUTING.md
<ul>
<li>Added details to the naming convention used in SqlServerDsc.</li>
</ul>
</li>
<li>Changes to SqlServerDsc
<ul>
<li>The examples in the root of the Examples folder are obsolete. A note was added to the comment-based help in each example stating it is obsolete. This is a temporary measure until they are replaced (<a href="https://github.com/PowerShell/SqlServerDsc/issues/904">issue 904</a>).</li>
<li>Added new common test (regression test) for validating the long path issue for compiling resources in Azure Automation.</li>
<li>Fix resources in alphabetical order in README.md (<a href="https://github.com/PowerShell/SqlServerDsc/issues/908">issue 908</a>).</li>
</ul>
</li>
<li>Changes to SqlAG
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
<li>BREAKING CHANGE: The read-only property SQLServerNetName was removed in favor of EndpointHostName (<a href="https://github.com/PowerShell/SqlServerDsc/issues/924">issue 924</a>). Get-TargetResource will now return the value of property <a href="https://technet.microsoft.com/en-us/library/microsoft.sqlserver.management.smo.server.netname(v=sql.105).aspx" rel="nofollow">NetName</a> for the property EndpointHostName.</li>
</ul>
</li>
<li>Changes to SqlAGDatabase
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
<li>Changed the Get-MatchingDatabaseNames function to be case insensitive when matching database names (<a href="https://github.com/PowerShell/SqlServerDsc/issues/912">issue 912</a>).</li>
</ul>
</li>
<li>Changes to SqlAGListener
<ul>
<li>BREAKING CHANGE: Parameter NodeName has been renamed to ServerName (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlAGReplica
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
<li>BREAKING CHANGE: Parameters PrimaryReplicaSQLServer and PrimaryReplicaSQLInstanceName has been renamed to PrimaryReplicaServerName and PrimaryReplicaInstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/922">issue 922</a>).</li>
<li>BREAKING CHANGE: The read-only property SQLServerNetName was removed in favor of EndpointHostName (<a href="https://github.com/PowerShell/SqlServerDsc/issues/924">issue 924</a>). Get-TargetResource will now return the value of property <a href="https://technet.microsoft.com/en-us/library/microsoft.sqlserver.management.smo.server.netname(v=sql.105).aspx" rel="nofollow">NetName</a> for the property EndpointHostName.</li>
</ul>
</li>
<li>Changes to SqlAlwaysOnService
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlDatabase
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes SqlDatabaseDefaultLocation
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlDatabaseOwner
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlDatabasePermission
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlDatabaseRecoveryModel
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlDatabaseRole
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlRS
<ul>
<li>BREAKING CHANGE: Parameters RSSQLServer and RSSQLInstanceName has been renamed to DatabaseServerName and DatabaseInstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/923">issue 923</a>).</li>
</ul>
</li>
<li>Changes to SqlServerConfiguration
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerEndpoint
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerEndpointPermission
<ul>
<li>BREAKING CHANGE: Parameter NodeName has been renamed to ServerName (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
<li>Now the examples files have a shorter name so that resources will not fail to compile in Azure Automation (<a href="https://github.com/PowerShell/SqlServerDsc/issues/934">issue 934</a>).</li>
</ul>
</li>
<li>Changes to SqlServerEndpointState
<ul>
<li>BREAKING CHANGE: Parameter NodeName has been renamed to ServerName (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerLogin
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerMaxDop
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerMemory
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerNetwork
<ul>
<li>BREAKING CHANGE: Parameters SQLServer has been renamed to ServerName (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerPermission
<ul>
<li>BREAKING CHANGE: Parameter NodeName has been renamed to ServerName (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerRole
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
<li>Changes to SqlServerServiceAccount
<ul>
<li>BREAKING CHANGE: Parameters SQLServer and SQLInstanceName has been renamed to ServerName and InstanceName respectively (<a href="https://github.com/PowerShell/SqlServerDsc/issues/308">issue 308</a>).</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>SystemLocaleDsc</td>
<td>1.2.0.0</td>
<td>
<ul>
<li>Added resource helper module.</li>
<li>Change examples to meet HQRM standards and optin to Example validation tests.</li>
<li>Replaced examples in README.MD to links to Example files.</li>
<li>Added the VS Code PowerShell extension formatting settings that cause PowerShell files to be formatted as per the DSC Resource kit style guidelines.</li>
<li>Opted into Common Tests &#8220;Validate Module Files&#8221; and &#8220;Validate Script Files&#8221;.</li>
<li>Converted files with UTF8 with BOM over to UTF8.</li>
<li>Updated Year to 2017 in License and Manifest.</li>
<li>Added .github support files:
<ul>
<li>CONTRIBUTING.md</li>
<li>ISSUE_TEMPLATE.md</li>
<li>PULL_REQUEST_TEMPLATE.md</li>
</ul>
</li>
<li>Resolved all PSScriptAnalyzer warnings and style guide warnings.</li>
</ul>
</td>
</tr>
<tr>
<td>xAdcsDeployment</td>
<td>1.4.0.0</td>
<td>
<ul>
<li>xAdcsCertificateAuthority: CertFilePassword invalid type &#8211; fixes <a href="https://github.com/PowerShell/xAdcsDeployment/issues/36">issue 36</a></li>
</ul>
</td>
</tr>
<tr>
<td>xCertificate</td>
<td>3.1.0.0</td>
<td>
<ul>
<li>xCertReq:
<ul>
<li>Fixed behaviour to allow certificate templates with spaces in the name</li>
</ul>
</li>
<li>Added <code>Documentation and Examples</code> section to Readme.md file &#8211; see <a href="https://github.com/PowerShell/xCertificate/issues/98">issue 98</a>.</li>
<li>Changed description in Credential parameter of xPfxImport resource to correctly generate parameter documentation in Wiki &#8211; see <a href="https://github.com/PowerShell/xCertificate/issues/103">Issue 103</a>.</li>
<li>Changed description in Credential parameter of xCertReq resource to clarify that a PSCredential object should be used.</li>
<li>Updated tests to meet Pester V4 guidelines &#8211; fixes <a href="https://github.com/PowerShell/xCertificate/issues/105">Issue 105</a>.</li>
<li>Add support for Windows Server 2008 R2 which does not contain PKI module so is missing <code>Import-PfxCertificate</code> and <code>Import-Certificate</code> cmdlets &#8211; fixes <a href="https://github.com/PowerShell/xCertificate/issues/46">Issue 46</a>.</li>
</ul>
</td>
</tr>
<tr>
<td>xComputerManagement</td>
<td>3.2.0.0</td>
<td>
<ul>
<li>xScheduledTask:
<ul>
<li>Enable Execution Time Limit of task to be set to indefinite by setting <code>ExecutionTimeLimit</code> to &#8220;00:00:00&#8221; &#8211; See <a href="https://github.com/PowerShell/xComputerManagement/issues/115">Issue 115</a></li>
</ul>
</li>
<li>xPowerPlan:
<ul>
<li>Updated to meet HQRM guidelines.</li>
<li>Converted calls to <code>throw</code> to use <code>New-InvalidOperationException</code> in CommonResourceHelper.</li>
</ul>
</li>
<li>Move Common Resource Helper functions into modules folder.</li>
<li>Changed resources to use Common Resource Helper functions.</li>
<li>Moved strings for Common Resource Helper functions into separate strings file.</li>
<li>Added unit tests for Common Helper functions.</li>
</ul>
</td>
</tr>
<tr>
<td>xExchange</td>
<td>1.18.0.0</td>
<td>
<ul>
<li>Fix issue 203 and add additional test for invalid ASA account format</li>
</ul>
</td>
</tr>
<tr>
<td>xHyper-V</td>
<td>3.10.0.0</td>
<td>
<ul>
<li>MSFT_xVMHyperV:
<ul>
<li>Added support for configuring automatic snapshots</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xNetworking</td>
<td>5.4.0.0</td>
<td>
<ul>
<li>MSFT_xIPAddressOption:
<ul>
<li>Added a new resource to set the SkipAsSource option for an IP address.</li>
</ul>
</li>
<li>MSFT_xWeakHostSend:
<ul>
<li>Created the new Weak Host Send resource.</li>
</ul>
</li>
<li>MSFT_xWeakHostReceive:
<ul>
<li>Created the new Weak Host Receive resource.</li>
</ul>
</li>
<li>MSFT_xRoute:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Converted exceptions to use ResourceHelper functions.</li>
<li>Changed unit tests so that they can be run in any order.</li>
<li>Included default values in MOF file so that they are displayed in Wiki documentation.</li>
<li>Converted tests to meet Pester V4 standards.</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xPowerShellExecutionPolicy</td>
<td>2.0.0.0</td>
<td>
<ul>
<li>Converted appveyor.yml to install Pester from PSGallery instead of from Chocolatey.</li>
<li>Added optional -Scope parameter</li>
</ul>
</td>
</tr>
<tr>
<td>xRemoteDesktopSessionHost</td>
<td>1.5.0.0</td>
<td>
<ul>
<li>Fix issue where DSC configuration gets into a reboot loop because sessionhost does not match (casing) and RDMS service is not started in time</li>
</ul>
</td>
</tr>
<tr>
<td>xStorage</td>
<td>3.4.0.0</td>
<td>
<ul>
<li>xDisk:
<ul>
<li>Removed duplicate integration tests for Guid Disk Id type.</li>
<li>Added new contexts to integration tests improve clarity.</li>
<li>Fix bug when size not specified and disk partitioned and formatted but not assigned drive letter &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/103">Issue 103</a>.</li>
</ul>
</li>
<li>xDiskAccessPath:
<ul>
<li>Added new contexts to integration tests improve clarity.</li>
<li>Fix bug when size not specified and disk partitioned and formatted but not assigned to path &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/103">Issue 103</a>.</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xSystemSecurity</td>
<td>1.3.0.0</td>
<td>
<ul>
<li>Updated FileSystemACL Set</li>
</ul>
</td>
</tr>
<tr>
<td>xTimeZone</td>
<td>1.7.0.0</td>
<td>
<ul>
<li>Added resource helper module.</li>
<li>Changed resource file names to include MSFT_*.</li>
<li>Added MSFT_ to MOF file classname.</li>
<li>Change examples to meet HQRM standards and optin to Example validation tests.</li>
<li>Replaced examples in README.MD to links to Example files.</li>
<li>Added the VS Code PowerShell extension formatting settings that cause PowerShell files to be formatted as per the DSC Resource kit style guidelines.</li>
<li>Opted into Common Tests &#8220;Validate Module Files&#8221; and &#8220;Validate Script Files&#8221;.</li>
<li>Converted files with UTF8 with BOM over to UTF8.</li>
<li>Updated Year to 2017 in License and Manifest.</li>
<li>Added .github support files:
<ul>
<li>CONTRIBUTING.md</li>
<li>ISSUE_TEMPLATE.md</li>
<li>PULL_REQUEST_TEMPLATE.md</li>
</ul>
</li>
<li>Resolved all PSScriptAnalyzer warnings and style guide warnings.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<h2>How to Find Released DSC Resource Modules</h2>
<p>To see a list of <strong>all</strong> released DSC Resource Kit modules, go to the <a href="http://www.powershellgallery.com/" rel="nofollow">PowerShell Gallery</a> and display <a href="http://www.powershellgallery.com/packages?q=Tags%3A%22DSCResourceKit%22" rel="nofollow">all modules tagged as DSCResourceKit</a>. You can also enter a module&#8217;s name in the search box in the upper right corner of the PowerShell Gallery to find a specific module.</p>
<p>Of course, you can also always use PowerShellGet (available in <a href="https://www.microsoft.com/en-us/download/details.aspx?id=50395" rel="nofollow">WMF 5.0</a>) to find modules with DSC Resources:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c"># To list all modules that are part of the DSC Resource Kit</span>
<span class="pl-c1">Find-Module</span> <span class="pl-k">-</span>Tag DSCResourceKit 
<span class="pl-c"># To list all DSC resources from all sources </span>
<span class="pl-c1">Find-DscResource</span></pre>
</div>
<p>To find a <strong>specific</strong> module, go directly to its URL on the PowerShell Gallery:<br />
<a href="http://www.powershellgallery.com/packages/" rel="nofollow">http://www.powershellgallery.com/packages/</a>&lt; module name &gt;<br />
For example:<br />
<a href="http://www.powershellgallery.com/packages/xWebAdministration" rel="nofollow">http://www.powershellgallery.com/packages/xWebAdministration</a></p>
<h2>How to Install DSC Resource Modules From the PowerShell Gallery</h2>
<p>We recommend that you use PowerShellGet to install DSC resource modules:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Install-Module</span> <span class="pl-k">-</span>Name <span class="pl-k">&lt;</span> module name <span class="pl-k">&gt;</span></pre>
</div>
<p>For example:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Install-Module</span> <span class="pl-k">-</span>Name xWebAdministration</pre>
</div>
<p>To update all previously installed modules at once, open an elevated PowerShell prompt and use this command:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Update-Module</span></pre>
</div>
<p>After installing modules, you can discover all DSC resources available to your local system with this command:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Get-DscResource</span></pre>
</div>
<h2>How to Find DSC Resource Modules on GitHub</h2>
<p>All resource modules in the DSC Resource Kit are available open-source on GitHub.<br />
You can see the most recent state of a resource module by visiting its GitHub page at:<br />
<a href="https://github.com/PowerShell/">https://github.com/PowerShell/</a>&lt; module name &gt;<br />
For example, for the xCertificate module, go to:<br />
<a href="https://github.com/PowerShell/xCertificate">https://github.com/PowerShell/xCertificate</a>.</p>
<p>All DSC modules are also listed as submodules of the <a href="https://github.com/PowerShell/DscResources/">DscResources repository</a> in the <a href="https://github.com/PowerShell/DscResources/tree/master/xDscResources">xDscResources folder</a>.</p>
<h2>How to Contribute</h2>
<p>You are more than welcome to contribute to the development of the DSC Resource Kit! There are several different ways you can help. You can create new DSC resources or modules, add test automation, improve documentation, fix existing issues, or open new ones.<br />
See our <a href="https://github.com/PowerShell/DscResources/blob/master/CONTRIBUTING.md">contributing guide</a> for more info on how to become a DSC Resource Kit contributor.</p>
<p>If you would like to help, please take a look at the list of <a href="https://github.com/PowerShell/DscResources/issues">open issues</a> for the DscResources repository.<br />
You can also check issues for specific resource modules by going to:<br />
<a href="https://github.com/PowerShell/">https://github.com/PowerShell/</a>&lt; module name &gt;/issues<br />
For example:<br />
<a href="https://github.com/PowerShell/xPSDesiredStateConfiguration/issues">https://github.com/PowerShell/xPSDesiredStateConfiguration/issues</a></p>
<p>Your help in developing the DSC Resource Kit is invaluable to us!</p>
<h2>Questions, comments?</h2>
<p>If you&#8217;re looking into using PowerShell DSC, have questions or issues with a current resource, or would like a new resource, let us know in the comments below, on Twitter (<a href="https://twitter.com/PowerShell_Team" rel="nofollow">@PowerShell_Team</a>), or by creating an issue on <a href="https://github.com/powershell/dscresources/issues">GitHub</a>.</p>
<p>Katie Keim<br />
Software Engineer<br />
PowerShell DSC Team<br />
<a href="https://twitter.com/katiedsc" rel="nofollow">@katiedsc</a> (Twitter)<br />
<a href="https://github.com/kwirkykat">@kwirkykat</a> (GitHub)</p>
</div>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2017/12/20/dsc-resource-kit-release-december-2017/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Using the OpenSSH Beta in Windows 10 Fall Creators Update and Windows Server 1709</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/#comments</comments>
		<pubDate>Fri, 15 Dec 2017 23:05:46 +0000</pubDate>
		<dc:creator><![CDATA[Joey Aiello [MSFT]]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13846</guid>
		<description><![CDATA[I&#8217;m thrilled to share that a Beta OpenSSH client and server daemon are available as a Feature-on-Demand in Windows 10 Fall Creators Update and Windows Server 1709. Since our last update blog, we&#8217;ve been working hard on a Win32 port of OpenSSH and working closely with members of the OpenSSH Portable and OpenBSD projects with... <a aria-label="read more about Using the OpenSSH Beta in Windows 10 Fall Creators Update and Windows Server 1709" href="https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<div class="markdown-body">
<p>I&#8217;m thrilled to share that a Beta OpenSSH client and server daemon are available as a Feature-on-Demand in Windows 10 Fall Creators Update and <a href="https://blogs.technet.microsoft.com/windowsserver/2017/09/25/faster-releases-for-a-faster-world-first-semi-annual-release-of-windows-server/" rel="nofollow">Windows Server 1709</a>. Since <a href="https://blogs.msdn.microsoft.com/powershell/2015/10/19/openssh-for-windows-update/" rel="nofollow">our last update blog</a>, we&#8217;ve been working hard on a <a href="https://github.com/powershell/Win32-OpenSSH">Win32 port of OpenSSH</a> and working closely with members of the OpenSSH Portable and OpenBSD projects with the eventual goal of bringing Win32 support upstream into OpenSSH Portable.</p>
<p>Until then, you should expect OpenSSH support in Windows to continue to improve in future updates of Windows, including upcoming Windows Insider builds. You can track our progress <a href="https://github.com/powershell/Win32-OpenSSH">on GitHub</a> where you can find <a href="https://github.com/powershell/Win32-OpenSSH/wiki">our wiki</a> and the <a href="https://github.com/powershell/Win32-OpenSSH">latest builds</a> that include tons of fixes and support for operating systems downlevel to Windows 7 and Server 2008 R2.</p>
<h2>Overview</h2>
<p><a href="https://www.openssh.com/" rel="nofollow">OpenSSH</a> is a collection of client/server utilities that enable secure remote login, remote file transfer, and public/private key pair management. It&#8217;s an extremely powerful tool that originated as part of the OpenBSD project, and has been used for many years across the BSD, Linux, macOS, and Unix ecosystems.</p>
<p><strong>Note: The OpenSSH client and server are still very much in Beta,</strong> <strong>so we do not recommend using them in production environments.</strong></p>
<h2>Installation</h2>
<p>Great! So how do I install the bits?</p>
<h3>Installing with the Settings UI</h3>
<p>To install it using the Settings UI, go to Apps -&gt; Apps and Features -&gt; Manage optional features -&gt; Add a feature:</p>
<p><a href="https://msdnshared.blob.core.windows.net/media/2017/12/apps_and_features_dark.png"></a><a href="https://msdnshared.blob.core.windows.net/media/2017/12/apps_and_features_dark.png"><img src="https://msdnshared.blob.core.windows.net/media/2017/12/apps_and_features_dark-500x303.png" alt="Apps and features" class="alignnone wp-image-13855 size-mediumlarge" width="500" height="303" /></a><a href="https://msdnshared.blob.core.windows.net/media/2017/12/manage_optional_features_dark.png"><img src="https://msdnshared.blob.core.windows.net/media/2017/12/manage_optional_features_dark-377x350.png" alt="Manage optional features" class="alignnone wp-image-13856 size-mediumlarge" width="377" height="350" /></a></p>
<p>Then select OpenSSH Client (Beta) or OpenSSH Server (Beta) and Install:</p>
<p><a href="https://msdnshared.blob.core.windows.net/media/2017/12/add_a_feature_dark.png"><img src="https://msdnshared.blob.core.windows.net/media/2017/12/add_a_feature_dark-490x350.png" alt="Add a feature" class="alignnone wp-image-13865 size-mediumlarge" width="490" height="350" /></a><a target="_blank" href="/path/to/image" rel="noopener"></a></p>
<h3>Installing with PowerShell</h3>
<p>To install OpenSSH using PowerShell, first launch PowerShell as an Administrator.</p>
<p>To make sure that the OpenSSH features are available for install:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Get-WindowsCapability</span> <span class="pl-k">-</span>Online <span class="pl-k">|</span> <span class="pl-k">?</span> Name <span class="pl-k">-like</span> <span class="pl-s">'OpenSSH*'</span></pre>
</div>
<p>This should return the following output:</p>
<pre><code>Name  : OpenSSH.Client~~~~0.0.1.0
State : NotPresent

Name  : OpenSSH.Server~~~~0.0.1.0
State : NotPresent
</code></pre>
<p>Then, install the server and/or client features:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c"># Install the OpenSSH Client</span>
<span class="pl-c1">Add-WindowsCapability</span> <span class="pl-k">-</span>Online <span class="pl-k">-</span>Name OpenSSH.Client~~~~<span class="pl-c1"><span class="pl-c1">0.0</span></span>.<span class="pl-c1"><span class="pl-c1">1.0</span></span>

<span class="pl-c"># Install the OpenSSH Server</span>
<span class="pl-c1">Add-WindowsCapability</span> <span class="pl-k">-</span>Online <span class="pl-k">-</span>Name OpenSSH.Server~~~~<span class="pl-c1"><span class="pl-c1">0.0</span></span>.<span class="pl-c1"><span class="pl-c1">1.0</span></span></pre>
</div>
<p>Both of these should return the following output:</p>
<pre><code>Path          :
Online        : True
RestartNeeded : False
</code></pre>
<h3>Installing with DISM.exe</h3>
<p>To install OpenSSH with DISM.exe, first open CMD as an Administrator.</p>
<p>To make sure that OpenSSH features are available for install:</p>
<div class="highlight highlight-source-batchfile">
<pre>dism /Online /Get-Capabilities <span class="pl-k">|</span> <span class="pl-k">findstr</span> OpenSSH</pre>
</div>
<p>This should return the following output:</p>
<pre><code>Capability Identity : OpenSSH.Client~~~~0.0.1.0
Capability Identity : OpenSSH.Server~~~~0.0.1.0
</code></pre>
<p>Then, install the server and/or client features:</p>
<div class="highlight highlight-source-batchfile">
<pre>dism /Online /Add-Capability /CapabilityName:OpenSSH.Client~~~~0.0.1.0
dism /Online /Add-Capability /CapabilityName:OpenSSH.Server~~~~0.0.1.0</pre>
</div>
<h2>Configuration</h2>
<p>Great! You&#8217;ve installed OpenSSH. What now?</p>
<h3>Configuring the SSH Client (ssh.exe)</h3>
<h4>Password-based authentication</h4>
<p>If you want to use the SSH client with password authentication, no configuration is necessary. Just pop open PowerShell or cmd, and use <code>ssh</code> to connect to your SSH server:</p>
<div class="highlight highlight-source-powershell">
<pre>ssh user1@contoso.com

<span class="pl-c"># You can also use domain accounts to login</span>

<span class="pl-c"># UPN syntax works...</span>
ssh user1@domain1@contoso.com
<span class="pl-c"># ...as does NetBIOS syntax</span>
ssh user1\domain1@contoso.com</pre>
</div>
<h4>Key-based authentication</h4>
<p>If you want to use key-based authentication, you first need to generate some public/private key pairs for your client. From PowerShell or cmd, use <code>ssh-keygen</code> to generate some key files.</p>
<div class="highlight highlight-source-powershell">
<pre>cd ~\.ssh\
ssh<span class="pl-k">-</span>keygen</pre>
</div>
<p>This should output something like:</p>
<pre><code>Generating public/private ed25519 key pair.
Enter file in which to save the key (C:\Users\user1\.ssh\id_ed25519):
</code></pre>
<p>You can hit Enter to accept the default or specify a path where you&#8217;d like your keys to be generated. At this point, you&#8217;ll be prompted to use a passphrase to encrypt your private key files.</p>
<pre><code>Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in C:\Users\user1\.ssh\id_ed25519.
Your public key has been saved in C:\Users\user1\.ssh\id_ed25519.pub.
The key fingerprint is:
SHA256:OIzc1yE7joL2Bzy8/gS0j8eGK7bYaH1FmF3sDuMeSj8 user1@CONTOSO@LOCAL-HOSTNAME
The key's randomart image is:
+--[ED25519 256]--+
|        .        |
|         o       |
|    . + + .      |
|   o B * = .     |
|   o= B S .      |
|   .=B O o       |
|  + =+% o        |
| *oo.O.E         |
|+.o+=o. .        |
+----[SHA256]-----+
</code></pre>
<p>Now you have a public/private ED25519 key pair<br />
(the .pub files are public keys and the rest are private keys):</p>
<pre><code>Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        11/8/2017  11:09 AM           1679 id_ed25519
-a----        11/8/2017  11:09 AM            414 id_ed25519.pub
</code></pre>
<p><strong>Your private key files are the equivalent of a password. </strong><strong>You should protect them under any and all circumstances. </strong><strong>If someone acquires your private key, </strong><strong>they can log in to any SSH server as an identity that authorizes the corresponding public key to log in.</strong></p>
<p>For that reason, we should take advantage of <code>ssh-agent</code> to securely store the private keys within a Windows security context. To do that, we simply start the <code>ssh-agent</code> service (as Administrator) and use <code>ssh-add</code> to store our private key. Then, whenever a private key is needed for authentication, <code>ssh-agent</code> will automatically retrieve your local user&#8217;s private key and pass it to your SSH client.</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c"># Make sure you're running as an Administrator</span>
<span class="pl-c1">Start-Service</span> ssh<span class="pl-k">-</span>agent

<span class="pl-c"># This should return a status of Running</span>
<span class="pl-c1">Get-Service</span> ssh<span class="pl-k">-</span>agent

<span class="pl-c"># Now load your key files into ssh-agent</span>
ssh<span class="pl-k">-</span>add ~\.ssh\id_ed25519

<span class="pl-c"># Now that it's loaded into ssh-agent,</span>
<span class="pl-c"># we don't have to keep the key file anymore</span>
<span class="pl-c1">Remove-Item</span> ~\.ssh\id_ed25519</pre>
</div>
<p>Move the contents of your public key (<code>~\.ssh\id_ed25519.pub</code>) into a text file called <code>authorized_keys</code> in <code>~\.ssh\</code> on your server/host.</p>
<p>Note: these directions assume your sshd server is a Windows-based machine using our OpenSSH-based server, and that you&#8217;ve properly configured it based on the instructions below (including the installation of the <code>OpenSSHUtils</code> PowerShell module). If you&#8217;re using a non-Windows machine, you should replace all remote instances of <code>C:\users\user1</code> with something like <code>/home/user1</code>. Additionally, the ACL line should be unnecessary that uses PowerShell should be unnecessary.</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c"># Make sure that the .ssh directory exists in your server's home folder</span>
ssh user1@domain1@contoso.com mkdir C:\users\user1\.ssh\

<span class="pl-c"># Copy your public key file to authorized_keys on your server</span>
scp C:\Users\user1\.ssh\id_ed25519.pub user1@domain1@contoso.com:C:\Users\user1\.ssh\authorized_keys

<span class="pl-c"># Appropriately ACL the authorized_keys file on your server</span>
ssh <span class="pl-k">--</span><span class="pl-k">%</span> user1@domain1@contoso.com powershell <span class="pl-k">-</span>c <span class="pl-k">$</span><span class="pl-c1">ConfirmPreference</span> <span class="pl-k">=</span> <span class="pl-s">'None'</span><span class="pl-k">;</span> <span class="pl-c1">Repair-AuthorizedKeyPermission</span> C:\Users\user1\.ssh\authorized_keys</pre>
</div>
<p>Congrats! You should no longer need a password when authenticating as <code>User1</code> against <code>contoso.com</code>.</p>
<h3>Configuring the OpenSSH Server (sshd)</h3>
<p><strong>First, it&#8217;s worth noting again that this OpenSSH for Windows is still very much in beta form. </strong><strong>It should only be used in safe, testing environments.</strong></p>
<p>To enable authentication into an SSH server on Windows, you first have to generate host keys. As an Administrator:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Start-Service</span> ssh<span class="pl-k">-</span>agent

cd C:\Windows\System32\OpenSSH
.\ssh<span class="pl-k">-</span>keygen <span class="pl-k">-</span>A
<span class="pl-c"># C:\Windows\System32\OpenSSH\ssh-keygen.exe: generating new host keys: ED25519</span>
.\ssh<span class="pl-k">-</span>add ssh_host_ed25519_key
<span class="pl-c"># Identity added: .\ssh_host_ed25519_key (User1@CONTOSO@LOCAL-HOSTNAME)</span></pre>
</div>
<p>Due to certain security requirements, you will also have to install our <code>OpenSSHUtils</code> helper module to appropriately ACL your host keys. As an Administrator:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Install-Module</span> <span class="pl-k">-</span>Force OpenSSHUtils

<span class="pl-c1">Repair-SshdHostKeyPermission</span> <span class="pl-k">-</span>FilePath C:\Windows\System32\OpenSSH\ssh_host_ed25519_key

<span class="pl-c"># Use A or Y as your response to the prompts to set file owners</span></pre>
</div>
<p>Then you can start sshd and your server is ready to go:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Start-Service</span> sshd

<span class="pl-c"># This should return a Status of Running</span>
<span class="pl-c1">Get-Service</span> sshd</pre>
</div>
<p>Note: currently only the built-in ED25519 authentication key type is supported. In the future, we plan to add support for LibreSSL which will enable additional authentication key types. In the meantime, you can experiment with LibreSSL builds <a href="https://github.com/powershell/openssh/releases">on GitHub</a>.</p>
<p>You may also need to add a firewall rule like this one that allows traffic on port 22 (though your requirements may vary based on your environment, e.g. <code>Domain</code> might be <code>Private</code>):</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">New-NetFirewallRule</span> <span class="pl-k">-</span>Name sshd <span class="pl-k">-</span>DisplayName <span class="pl-s">'OpenSSH Server (sshd)' -Service sshd</span> <span class="pl-k">-</span>Enabled True <span class="pl-k">-</span>Direction Inbound <span class="pl-k">-</span>Protocol TCP <span class="pl-k">-</span>Action Allow <span class="pl-k">-</span>Profile Domain</pre>
</div>
<h2>Stay tuned!</h2>
<p>Enjoy playing with OpenSSH on Windows, and keep your eyes peeled on the PowerShell blog for upcoming news.</p>
</div>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/feed/</wfw:commentRss>
		<slash:comments>49</slash:comments>
		</item>
		<item>
		<title>DSC Resource Naming Guidelines</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2017/12/08/dsc-resource-naming-and-support-guidelines/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2017/12/08/dsc-resource-naming-and-support-guidelines/#comments</comments>
		<pubDate>Fri, 08 Dec 2017 18:00:48 +0000</pubDate>
		<dc:creator><![CDATA[Michael Greene]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13805</guid>
		<description><![CDATA[When DSC was announced at TechEd 2013, one of the goals was to &#8220;Create an ecosystem&#8221;. The ecosystem for DSC has grown tremendously in the last 4 years. At worldwide events for PowerShell (PowerShell + DevOps Global Summit, PowerShell Conference EU, PowerShell Conference Asia) there have been presentations lead by people actively using DSC to discuss real world, success, challenges, and... <a aria-label="read more about DSC Resource Naming Guidelines" href="https://blogs.msdn.microsoft.com/powershell/2017/12/08/dsc-resource-naming-and-support-guidelines/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<p>When DSC was<span> </span><a href="https://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/MDC-B302" rel="nofollow">announced</a><span> </span>at TechEd 2013, one of the<span> </span><a href="https://view.officeapps.live.com/op/view.aspx?src=http%3a%2f%2fvideo.ch9.ms%2fsessions%2fteched%2fna%2f2013%2fMDC-B302.pptx" rel="nofollow">goals</a><span> </span>was to &#8220;Create an ecosystem&#8221;.</p>
<p>The ecosystem for DSC has grown tremendously in the last 4 years.</p>
<p>At worldwide events for PowerShell (<a href="https://powershell.org/summit/" rel="nofollow">PowerShell + DevOps Global Summit</a>,<span> </span><a href="http://www.psconf.eu/" rel="nofollow">PowerShell Conference EU</a>,<span> </span><a href="http://www.psconf.asia/" rel="nofollow">PowerShell Conference Asia</a>) there have been presentations lead by people actively using DSC to discuss real world, success, challenges, and community projects to resolve common issues. In addition there are community projects to build solutions for DSC entirely driven by the community, such as<span> </span><a href="https://github.com/gaelcolas/Datum">Datum</a><span> </span>to manage configuration data at scale,<span> </span><a href="https://github.com/Microsoft/BaselineManagement">BaselineManagement</a><span> </span>to convert Group Policy to DSC configurations, and<span> </span><a href="https://github.com/Microsoft/ReverseDSC">ReverseDSC</a><span> </span>to replicate known environments.</p>
<p>The<span> </span><a href="https://www.powershellgallery.com/" rel="nofollow">PowerShell Gallery</a><span> </span>includes 1100 DSC Resources across 254 unique modules. Of those 1100 DSC Resources, 411 are currently released by the DSC team from the DSC Resource Kit.</p>
<p>During events and the monthly DSC Resource Kit community calls over the past year, I have heard consistently that<span> </span><strong>the naming convention for DSC Resources is ready for an update.</strong><span> </span>Most notably, the<span> </span><a href="https://blogs.msdn.microsoft.com/powershell/2013/12/26/holiday-gift-desired-state-configuration-dsc-resource-kit-wave-1/" rel="nofollow">experimental &#8220;x&#8221; prefix</a><span> </span>and<span> </span><a href="https://github.com/PowerShell/DscResources/blob/master/HighQualityModuleGuidelines.md">HQRM</a> guidance could be confusing and does not match the approach used in other similar community ecosystems.</p>
<h2>The Old Naming Convention</h2>
<p>The original recommendation was to name resources using the following prefixes:</p>
<ul>
<li>&#8220;x&#8221; to identify a resource that is experimental and not supported</li>
<li>&#8220;c&#8221; to identify a community modification</li>
</ul>
<p>Resources that met a community agreed upon quality bar, or &#8220;High Quality Resource Modules&#8221;, have been using a naming suffix &#8220;Dsc&#8221;.</p>
<h2>The New Naming Convention</h2>
<p>The community has discussed and agreed upon a new simplified standard, explained in a recent update to the<span> </span><a href="https://github.com/PowerShell/DscResources/blob/master/Naming.md">documentation</a>.</p>
<p><strong>DSC Resources going forward are no longer required to use the &#8220;x&#8221; or &#8220;c&#8221; naming conventions.</strong></p>
<p>Instead, the guideline is that resources should use either the existing module name (if DSC Resources are combined with an existing module containing PowerShell functions) or the &#8220;Dsc&#8221; suffix. The best practices for finding a DSC Resource module is to search the PowerShell Gallery using the &#8220;DSC Resource&#8221; filter, or use the cmdlet:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Find-DscResource</span></pre>
</div>
<p>The project name will not have any relationship with how or whether the project is supported. The<span> </span><a href="https://github.com/PowerShell/DscResources/blob/master/Supportability.md">documentation</a><span> </span>merged today also addresses this topic.</p>
<h2>Why is it the right time to make this change</h2>
<p>This is only possible because the DSC community, especially the DSC Resource project maintainers, are so passionate and actively working with DSC users to make the ecosystem better for everyone. The maintainers hold each other accountable to quality and technically enforce this through test automation.</p>
<p>The first community contributions to the DSC Resource Kit contained only the PowerShell code for the DSC module. The expectation for a contribution today includes following <a href="https://github.com/PowerShell/DscResources/blob/master/BestPractices.md">best practices</a>, <a href="https://github.com/PowerShell/DscResources/blob/master/StyleGuidelines.md">style guidelines</a>, documentation, and <a href="https://github.com/PowerShell/DscResources/blob/master/TestsGuidelines.md">test</a> automation to demonstrate quality. As an example, the SharePointDsc module includes 2102 tests that must pass to accept a new contribution, and anyone can review the<span> </span><a href="https://ci.appveyor.com/project/PowerShell/xsharepoint/branch/master" rel="nofollow">results of a new build</a>. Similarly,<span> </span><a href="https://github.com/PowerShell/sqlserverdsc">SQLServerDsc</a><span> </span>includes 2507 tests (and has already adopted the new naming standard),<span> </span><a href="https://github.com/PowerShell/xwebadministration">xWebAdministration</a><span> </span>has 1032, and<span> </span><a href="https://github.com/PowerShell/xactivedirectory">xActiveDirectory</a><span> </span>includes 653.</p>
<h2>How do I know if a DSC Resource is supported</h2>
<p>The old naming convention using &#8220;x&#8221; and &#8220;c&#8221; prefixes required users to modify their code when switching from experimental to stable versions of a module.  Support for DSC Resources should come from the organization supporting the technology that is being managed. The best way to make that clear is to express it in the project Readme. Just as someone interested in consuming the resource should review the project code and make sure it is suitable for their environment, they should review the entire project documentation.</p>
<h2>When will this change happen</h2>
<p>Finally, this change does not need to be implemented &#8220;overnight&#8221;. As maintainers release future versions of their projects and determine they are ready, they can choose to retire the &#8220;x&#8221; convention. The PowerShell Gallery will provide access to future releases by the new name and the history of previous releases by the old name. The project repository will be the source of truth.</p>
<p>Thank you!<span> </span><br />
Michael Greene<span> </span><a href="http://twitter.com/migreene" rel="nofollow">@migreene</a><span> </span><br />
Principal Program Manager<span> </span><br />
PowerShell DSC, Azure Automation DSC, and Azure Management Community</p>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2017/12/08/dsc-resource-naming-and-support-guidelines/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Prerelease Versioning Added to PowerShellGet and PowerShell Gallery</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2017/12/05/prerelease-versioning-added-to-powershellget-and-powershell-gallery/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2017/12/05/prerelease-versioning-added-to-powershellget-and-powershell-gallery/#respond</comments>
		<pubDate>Wed, 06 Dec 2017 00:59:25 +0000</pubDate>
		<dc:creator><![CDATA[J. Keith Bankston]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13745</guid>
		<description><![CDATA[With the release of PowerShellGet 1.6.0, PowerShellGet cmdlets and the PowerShell Gallery have added support for prerelease strings for prerelease versions of modules and scripts. You can now publish items to the PowerShell Gallery with a version like 1.0.0-alpha, and you can download items identified as a prerelease. Items can be filtered using prerelease version... <a aria-label="read more about Prerelease Versioning Added to PowerShellGet and PowerShell Gallery" href="https://blogs.msdn.microsoft.com/powershell/2017/12/05/prerelease-versioning-added-to-powershellget-and-powershell-gallery/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<div>
<div><span>With the release of <a href="https://www.powershellgallery.com/packages/PowerShellGet/">PowerShellGet 1.6.0</a>, PowerShellGet cmdlets and the PowerShell Gallery have added support for prerelease strings for prerelease versions of modules and scripts. </span><span>You can now publish items to the PowerShell Gallery with a version like 1.0.0-alpha, and you can download items identified as a prerelease. </span><span>Items can be filtered using prerelease version strings, in both the Gallery UI and via Find-* cmdlets. </span></div>
<div></div>
<div><span>Before this feature, if publishers wished to publish a prerelease version of an item, they had to use a version lower than 1.0.0 (ex. 0.0.1). </span><span>This meant it was not possible to publish a prerelease version of a 2.0.0 item. </span><span>The other workaround was to change the name of the item to contain the word “prerelease” (ex. MyAwesomeModule-Prerelease), but that required code changes for users when the production version was ready, because it changed the name of the item.  </span></div>
<div>
<div>
<div><span>Now, users can mark their items as prerelease, following the </span><a href="http://semver.org/spec/v1.0.0.html"><span>SemVer v1.0.0</span></a><span> guidelines, without affecting the item name or constraints on the version. </span></div>
<div><span>Publishers simply add the prerelease string (ie. the part that comes after &#8220;2.0.0&#8221;) in the metadata, and the version will be considered prerelease. For example:</span></div>
</div>
<pre>@{
   ModuleVersion = '2.0.0'
   #---
      PrivateData = @{
         PSData = @{
            Prerelease = '-alpha'
      }
   }
}</pre>
<div>
<div>
<div>
<div><span>To acquire or interact with prerelease items using the PowerShellGet cmdlets, users must add the -AllowPrerelease flag. For example, to find prerelease versions of a module:</span></div>
</div>
<pre>   PS:&gt; Find-Module PSReadline -AllowPrerelease -Allversions</pre>
<div>
<div>
<div><span>To install a prerelease version from the gallery:</span></div>
<pre>   PS:&gt; Install-Module PSReadline -RequiredVersion 2.0.0-beta1 -AllowPrerelease
   PS:&gt; # Note that you may need to add -SkipPublisherCheck for this update to proceed.</pre>
<p>To update a module to a prerelease version from the gallery:</p>
<pre>   PS:&gt; Update-Module PSReadline -RequiredVersion 2.0.0-beta1 -AllowPrerelease
   PS:&gt; # Updates to 2.0.0-beta1. You may need to add -SkipPublisherCheck.</pre>
<div>
<div></div>
<div><span>The PowerShell Gallery UI has also been updated to support prerelease items. </span><span>In the Items page, a new dropdown under &#8220;Filter By&#8221; gives control over whether or not to list prerelease items. The options available are &#8220;Include Prerelease&#8221;, and &#8220;Stable Only&#8221;.</span></div>
<p><a href="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemsList-Filter.png"><img width="178" height="140" class="alignnone wp-image-13775" alt="PowerShell Gallery prerelease filter" src="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemsList-Filter.png" /></a></p>
<div>
<div></div>
<div><span>Additional changes appear on the pages for individual items. </span><span>If an item is a prerelease, there will be a banner at the top of the page stating that this is a prerelease version:</span></div>
<div>
<p><a href="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemPage-IsPrerelease.png"><img width="600" height="94" class="alignnone wp-image-13755" alt="PowerShell Gallery prerelease item banner" src="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemPage-IsPrerelease.png" /></a></p>
<div>
<div></div>
<div><span>The following banner was added to show that the current item is the latest stable version of an item, but a prerelease item exists with a higher version:</span></div>
<div>
<p><a href="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemPage-IsStable.png"><img width="600" height="125" class="alignnone wp-image-13756" alt="PowerShell last stable item banner" src="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemPage-IsStable.png" /></a></p>
</div>
</div>
</div>
</div>
</div>
<div>
<div>
<div></div>
<div><span>Finally, the item history on the same page has been updated to show the latest stable (or non-prerelease) version available, as shown below:</span></div>
<p><a href="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemPage-VersionHistory.png"><img width="450" height="159" class="alignnone wp-image-13765" alt="PowerShell Gallery prerelease item history" src="https://msdnshared.blob.core.windows.net/media/2017/12/2017-12-06-Prerelease-Versions-ItemPage-VersionHistory.png" /></a></p>
<div>
<div><strong>Some important things to note:</strong></div>
<ul>
<li><span>If -AllowPrerelease is not specified, the behavior of the cmdlets is the same as one would see with older versions of PowerShellGet: no prerelease versions will be returned. This ensures these changes are backwards compatible with previous PowerShellGet versions. </span></li>
<li><span>This change only affects the PowerShellGet cmdlets and the PowerShell Gallery. As of the writing of this blog, PowerShell does not support prerelease strings in version identifiers, so prerelease strings are provided as a separate element in the module manifest. </span></li>
<li><span>There are limitations on what the prerelease string can contain, see the </span><a href="https://docs.microsoft.com/en-us/powershell/gallery/psget/module/PreReleaseModule"><span>Documentation</span></a><span> for more details.  </span></li>
<li><span>Prerelease support follows the </span><a href="http://semver.org/spec/v1.0.0.html"><span>SemVer v1.0.0</span></a><span> guidelines. We chose to align with SemVer 1.0.0 to maintain parity with the current NuGet server used by many of our customers as an on-premise gallery.</span></li>
</ul>
</div>
<div>
<div><span>To start using prerelease versions in your modules and scripts with the PowerShell Gallery, update to the latest </span><a href="https://go.microsoft.com/fwlink/?linkid=846259"><span>PowerShellGet module</span></a><span>. </span><span>You must install the update in order to use the -AllowPrerelease flag, which is required for finding or downloading any prerelease items in the PowerShell Gallery.  </span></div>
<div><span>We would love to hear your feedback on this new feature. </span><span>Please submit any questions or comments in either the </span><span><a href="https://github.com/powershell/powershellget/issues">PowerShellGet GiHub repo issues</a> </span><span>, or the PowerShell Gallery <a href="https://windowsserver.uservoice.com/forums/301869-powershell/category/154503-powershell-gallery">feedback area </a></span><span>on UserVoice</span><span>.</span></div>
<div></div>
</div>
</div>
<div></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2017/12/05/prerelease-versioning-added-to-powershellget-and-powershell-gallery/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>PowerShell Core 6 Release Candidate</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2017/11/17/powershell-core-6-release-candidate/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2017/11/17/powershell-core-6-release-candidate/#comments</comments>
		<pubDate>Sat, 18 Nov 2017 01:03:38 +0000</pubDate>
		<dc:creator><![CDATA[Steve Lee [MSFT]]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13735</guid>
		<description><![CDATA[PowerShell Core 6 Release Candidate Last year, we announced that PowerShell was not only Open Source, but also cross platform.  The finish line is in sight and we recently published the Release Candidate for PowerShell Core 6! PowerShell Team ♥ Community It has been an amazing experience for the team working with the community on PowerShell Core... <a aria-label="read more about PowerShell Core 6 Release Candidate" href="https://blogs.msdn.microsoft.com/powershell/2017/11/17/powershell-core-6-release-candidate/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<p class="p1"><span class="s1"><b>PowerShell Core 6 Release Candidate</b></span></p>
<p class="p2"><span class="s1">Last year, we <a href="https://blogs.msdn.microsoft.com/powershell/2016/08/17/windows-powershell-is-now-powershell-an-open-source-project-with-linux-support-how-did-we-do-it/"><span class="s2">announced</span></a> that PowerShell was not only Open Source, but also cross platform.  The finish line is in sight and we recently published the <a href="https://github.com/PowerShell/PowerShell/releases/tag/v6.0.0-rc"><span class="s2">Release Candidate</span></a> for PowerShell Core 6!</span></p>
<p class="p3"><span class="s1"><b>PowerShell Team <span>♥ </span>Community</b></span></p>
<p class="p2"><span class="s1">It has been an amazing experience for the team working with the community on PowerShell Core 6!  Being able to work openly and transparently meant that we could address customer concerns much more quickly than in the days of Windows PowerShell.  The contributions from the community have also enabled PowerShell Core 6 to be more agile and richer in capability, particularly for cmdlets.  In fact, the community has <a href="https://msit.powerbi.com/view?r=eyJrIjoiYTYyN2U3ODgtMjBlMi00MGM1LWI0ZjctMmQ3MzE2ZDNkMzIyIiwidCI6IjcyZjk4OGJmLTg2ZjEtNDFhZi05MWFiLTJkN2NkMDExZGI0NyIsImMiOjV9&amp;pageName=ReportSection5&amp;pageName=ReportSectionbef8a22c3bc5ed20de40"><span class="s2">contributed just over half</span></a> of the pull requests (PRs)!</span></p>
<p class="p2"><span class="s1">This really shows the benefit of Open Source and an active community and we certainly wouldn&#8217;t have gotten as far as we have without such a passionate and helpful community!</span></p>
<p class="p3"><span class="s1"><b>Roadmap to General Availability and the Future</b></span></p>
<p class="p2"><span class="s1">When the PowerShell Team started working through all the <a href="https://github.com/PowerShell/PowerShell/issues/5472"><span class="s2">work required</span></a> to publish a release, we also created a <a href="https://github.com/PowerShell/PowerShell/tree/6.0.0"><span class="s2">branch</span></a> for the eventual PowerShell Core 6.0.0 final release.  There are still some <a href="https://github.com/PowerShell/PowerShell/issues?q=is%3Aopen+is%3Aissue+milestone%3A6.0.0-GA"><span class="s2">issues and work items</span></a> needed to be completed for the GA (General Availability) release.  General Available simply means a supported release (replaces the legacy term Release to Manufacturing!).</span></p>
<p class="p2"><span class="s1">This means that any changes merged to the master branch will show up in the 6.1.0 release.  I encourage the community to continue to make contributions to PowerShell Core with the expectation that it will be part of 6.1.0 and not 6.0.0.  Only issues (and associated pull requests) approved for 6.0.0 GA with milestone set to `</span><span class="s3">6.0.0-GA`</span><span class="s1"> will be taken for the 6.0.0 release.</span></p>
<p class="p2"><span class="s1">If you find any deployment or adoption blockers, please open issues on GitHub (or up vote existing ones with a thumbs up) and mention me (using `</span><span class="s3">@SteveL-MSFT`</span><span class="s1">) so I will be notified and those issues will be triaged and a decision will be made if we need to make or take a fix before 6.0.0 GA.</span></p>
<p class="p2"><span class="s1">We are currently targeting having the GA release on January 10th, 2018.</span></p>
<p class="p2"><span class="s1">The first PowerShell Core 6.1.0 beta release will be published after PowerShell Core 6.0.0 GA and we plan to continue a 3 week cadence for beta releases.  Note that if you use the </span><span class="s3">install-powershell.ps1</span><span class="s1"> script to <a href="https://twitter.com/Steve_MSFT/status/930585082451992576"><span class="s2">install daily builds</span></a>, it will be from the master branch (aka 6.1.0) and not from our 6.0.0 Release Candidate or GA.</span></p>
<p class="p3"><span class="s1"><b>PowerShell Core 6 Support</b></span></p>
<p class="p2"><span class="s1">PowerShell Core 6.0.0 will adopt the Microsoft <a href="https://support.microsoft.com/en-us/help/30881/modern-lifecycle-policy"><span class="s2">Modern Lifecycle</span></a> for support.  Essentially, this means that barring any critical security fixes, customer are expected to install the latest released version of PowerShell Core.  In general, if you find an issue, please open it on GitHub.  We&#8217;ll be providing more information on the specifics of this lifecycle and what it means for PowerShell Core soon.</span></p>
<p class="p2"><span class="s1">Thanks to everyone for their support and contributions!</span></p>
<p class="p2"><span class="s1">Steve Lee<br />
Principal Engineer Manager<br />
PowerShell Team</span></p>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2017/11/17/powershell-core-6-release-candidate/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>DSC Resource Kit Release November 2017</title>
		<link>https://blogs.msdn.microsoft.com/powershell/2017/11/15/dsc-resource-kit-release-november-2017/</link>
		<comments>https://blogs.msdn.microsoft.com/powershell/2017/11/15/dsc-resource-kit-release-november-2017/#respond</comments>
		<pubDate>Thu, 16 Nov 2017 02:14:06 +0000</pubDate>
		<dc:creator><![CDATA[Katie Keim [MSFT]]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">https://blogs.msdn.microsoft.com/powershell/?p=13726</guid>
		<description><![CDATA[We just released the DSC Resource Kit! This release includes updates to 10 DSC resource modules. In these past 6 weeks, 53 pull requests have been merged and 50 issues have been closed, all thanks to our amazing community! The modules updated in this release are: SecurityPolicyDsc xAdcsDeployment xComputerManagement xDnsServer xExchange xNetworking xPSDesiredStateConfiguration xSQLServer xStorage... <a aria-label="read more about DSC Resource Kit Release November 2017" href="https://blogs.msdn.microsoft.com/powershell/2017/11/15/dsc-resource-kit-release-november-2017/" class="read-more">Read more</a>]]></description>
				<content:encoded><![CDATA[<div class="markdown-body">
<p>We just released the DSC Resource Kit!</p>
<p>This release includes updates to <strong>10 DSC resource modules</strong>. In these past 6 weeks, <strong>53 pull requests</strong> have been merged and <strong>50 issues</strong> have been closed, all thanks to our amazing community!</p>
<p>The modules updated in this release are:</p>
<ul>
<li>SecurityPolicyDsc</li>
<li>xAdcsDeployment</li>
<li>xComputerManagement</li>
<li>xDnsServer</li>
<li>xExchange</li>
<li>xNetworking</li>
<li>xPSDesiredStateConfiguration</li>
<li>xSQLServer</li>
<li>xStorage</li>
<li>xWebAdministration</li>
</ul>
<p>For a detailed list of the resource modules and fixes in this release, see the Included in this Release section below.</p>
<p>Our last <strong>community call</strong> for the DSC Resource Kit was last week on Novemeber 8. A recording of our updates as well as summarizing notes will be available soon. Join us for the next call at 12PM (Pacific time) on December 20 to ask questions and give feedback about your experience with the DSC Resource Kit.<br />
Also, due to the Christmas holiday, the next DSC Resource Kit release will go out on <strong>Decemeber 20</strong> instead of the normal 6-week cadence which would be December 27.</p>
<p>We strongly encourage you to update to the newest version of all modules using the PowerShell Gallery, and don&#8217;t forget to give us your feedback in the comments below, on GitHub, or on Twitter (<a href="https://twitter.com/PowerShell_Team">@PowerShell_Team</a>)!</p>
<p>All resources with the &#8216;x&#8217; prefix in their names are still experimental &#8211; this means that those resources are provided AS IS and are not supported through any Microsoft support program or service. If you find a problem with a resource, please <a href="https://github.com/PowerShell/DscResources/blob/master/CONTRIBUTING.md#submitting-an-issue">file an issue</a> on GitHub.</p>
<h2>Included in this Release</h2>
<p>You can see a detailed summary of all changes included in this release in the table below. For past release notes, go to the README.md or Changelog.md file on the GitHub repository page for a specific module (see the How to Find DSC Resource Modules on GitHub section below for details on finding the GitHub page for a specific module).</p>
<table>
<thead>
<tr>
<th>Module Name</th>
<th>Version</th>
<th>Release Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>SecurityPolicyDsc</td>
<td>2.1.0.0</td>
<td>
<ul>
<li>Updated SecurityOption to handle multi-line logon messages</li>
<li>SecurityOption: Added logic and example to handle scenario when using Interactive_logon_Message_text_for_users_attempting_to_log_on</li>
</ul>
</td>
</tr>
<tr>
<td>xAdcsDeployment</td>
<td>1.3.0.0</td>
<td>
<ul>
<li>Updated to meet HQRM guidelines &#8211; fixes <a href="https://github.com/PowerShell/xAdcsDeployment/issues/33">issue 33</a>.</li>
<li>Fixed markdown rule violations in README.MD.</li>
<li>Change examples to meet HQRM standards and optin to Example validation tests.</li>
<li>Replaced examples in README.MD to links to Example files.</li>
<li>Added the VS Code PowerShell extension formatting settings that cause PowerShell files to be formatted as per the DSC Resource kit style guidelines.</li>
<li>Opted into Common Tests &#8220;Validate Module Files&#8221; and &#8220;Validate Script Files&#8221;.</li>
<li>Corrected description in manifest.</li>
<li>Added .github support files:
<ul>
<li>CONTRIBUTING.md</li>
<li>ISSUE_TEMPLATE.md</li>
<li>PULL_REQUEST_TEMPLATE.md</li>
</ul>
</li>
<li>Resolved all PSScriptAnalyzer warnings and style guide warnings.</li>
<li>Converted all tests to meet Pester V4 guidelines &#8211; fixes <a href="https://github.com/PowerShell/xAdcsDeployment/issues/32">issue 32</a>.</li>
<li>Fixed spelling mistakes in README.MD.</li>
<li>Fix to ensure exception thrown if failed to install or uninstall service &#8211; fixes <a href="https://github.com/PowerShell/xAdcsDeployment/issues/3">issue 3</a>.</li>
<li>Converted AppVeyor.yml to use shared AppVeyor module in DSCResource.Tests &#8211; fixes <a href="https://github.com/PowerShell/xAdcsDeployment/issues/29">issue 29</a>.</li>
</ul>
</td>
</tr>
<tr>
<td>xComputerManagement</td>
<td>3.1.0.0</td>
<td>
<ul>
<li>xOfflineDomainJoin:
<ul>
<li>Updated to meet HQRM guidelines.</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xDnsServer</td>
<td>1.9.0.0</td>
<td>
<ul>
<li>Added resource xDnsServerSetting</li>
<li>MSFT_xDnsRecord: Added DnsServer property</li>
</ul>
</td>
</tr>
<tr>
<td>xExchange</td>
<td>1.17.0.0</td>
<td>
<ul>
<li>Fix issue where test for Unlimited quota fails if quota is not already set at Unlimited</li>
</ul>
</td>
</tr>
<tr>
<td>xNetworking</td>
<td>5.3.0.0</td>
<td>
<ul>
<li>MSFT_xProxySettings:
<ul>
<li>Created new resource configuring proxy settings.</li>
</ul>
</li>
<li>MSFT_xDefaultGatewayAddress:
<ul>
<li>Correct <code>2-SetDefaultGateway.md</code> address family and improve example description &#8211; fixes <a href="https://github.com/PowerShell/xNetworking/issues/275">Issue 275</a>.</li>
</ul>
</li>
<li>MSFT_xIPAddress:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Converted exceptions to use ResourceHelper functions.</li>
<li>Changed unit tests so that they can be run in any order.</li>
</ul>
</li>
<li>MSFT_xNetAdapterBinding:
<ul>
<li>Corrected style and formatting to meet HQRM guidelines.</li>
<li>Converted exceptions to use ResourceHelper functions.</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xPSDesiredStateConfiguration</td>
<td>8.0.0.0</td>
<td>
<ul>
<li>xDSCWebService
<ul>
<li>BREAKING CHANGE: The Pull Server will now run in a 64 bit IIS process by default. Enable32BitAppOnWin64 needs to be set to TRUE for the Pull Server to run in a 32 bit process.</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xSQLServer</td>
<td>9.0.0.0</td>
<td>
<ul>
<li>Changes to xSQLServer
<ul>
<li>Updated Pester syntax to v4</li>
<li>Fixes broken links to issues in the CHANGELOG.md.</li>
</ul>
</li>
<li>Changes to xSQLServerDatabase
<ul>
<li>Added parameter to specify collation for a database to be different from server collation (<a href="https://github.com/PowerShell/xSQLServer/issues/767">issue 767</a>).</li>
<li>Fixed unit tests for Get-TargetResource to ensure correctly testing return values (<a href="https://github.com/PowerShell/xSQLServer/issues/849">issue 849</a>)</li>
</ul>
</li>
<li>Changes to xSQLServerAlwaysOnAvailabilityGroup
<ul>
<li>Refactored the unit tests to allow them to be more user friendly and to test additional SQLServer variations.
<ul>
<li>Each test will utilize the Import-SQLModuleStub to ensure the correct module is loaded (<a href="https://github.com/PowerShell/xSQLServer/issues/784">issue 784</a>).</li>
</ul>
</li>
<li>Fixed an issue when setting the SQLServer parameter to a Fully Qualified Domain Name (FQDN) (<a href="https://github.com/PowerShell/xSQLServer/issues/468">issue 468</a>).</li>
<li>Fixed the logic so that if a parameter is not supplied to the resource, the resource will not attempt to apply the defaults on subsequent checks (<a href="https://github.com/PowerShell/xSQLServer/issues/517">issue 517</a>).</li>
<li>Made the resource cluster aware. When ProcessOnlyOnActiveNode is specified, the resource will only determine if a change is needed if the target node is the active host of the SQL Server instance (<a href="https://github.com/PowerShell/xSQLServer/issues/868">issue 868</a>).</li>
</ul>
</li>
<li>Changes to xSQLServerAlwaysOnAvailabilityGroupDatabaseMembership
<ul>
<li>Made the resource cluster aware. When ProcessOnlyOnActiveNode is specified, the resource will only determine if a change is needed if the target node is the active host of the SQL Server instance (<a href="https://github.com/PowerShell/xSQLServer/issues/869">issue 869</a>).</li>
</ul>
</li>
<li>Changes to xSQLServerAlwaysOnAvailabilityGroupReplica
<ul>
<li>Made the resource cluster aware. When ProcessOnlyOnActiveNode is specified, the resource will only determine if a change is needed if the target node is the active host of the SQL Server instance (<a href="https://github.com/PowerShell/xSQLServer/issues/870">issue 870</a>).</li>
</ul>
</li>
<li>Added the CommonTestHelper.psm1 to store common testing functions.
<ul>
<li>Added the Import-SQLModuleStub function to ensure the correct version of the module stubs are loaded (<a href="https://github.com/PowerShell/xSQLServer/issues/784">issue 784</a>).</li>
</ul>
</li>
<li>Changes to xSQLServerMemory
<ul>
<li>Made the resource cluster aware. When ProcessOnlyOnActiveNode is specified, the resource will only determine if a change is needed if the target node is the active host of the SQL Server instance (<a href="https://github.com/PowerShell/xSQLServer/issues/867">issue 867</a>).</li>
</ul>
</li>
<li>Changes to xSQLServerNetwork
<ul>
<li>BREAKING CHANGE: Renamed parameter TcpDynamicPorts to TcpDynamicPort and changed type to Boolean (<a href="https://github.com/PowerShell/xSQLServer/issues/534">issue 534</a>).</li>
<li>Resolved issue when switching from dynamic to static port. configuration (<a href="https://github.com/PowerShell/xSQLServer/issues/534">issue 534</a>).</li>
<li>Added localization (en-US) for all strings in resource and unit tests (<a href="https://github.com/PowerShell/xSQLServer/issues/618">issue 618</a>).</li>
<li>Updated examples to reflect new parameters.</li>
</ul>
</li>
<li>Changes to xSQLServerRSConfig
<ul>
<li>Added examples</li>
</ul>
</li>
<li>Added resource
<ul>
<li>xSQLServerDatabaseDefaultLocation (<a href="https://github.com/PowerShell/xSQLServer/issues/656">issue 656</a>)</li>
</ul>
</li>
<li>Changes to xSQLServerEndpointPermission
<ul>
<li>Fixed a problem when running the tests locally in a PowerShell console it would ask for parameters (<a href="https://github.com/PowerShell/xSQLServer/issues/897">issue 897</a>).</li>
</ul>
</li>
<li>Changes to xSQLServerAvailabilityGroupListener
<ul>
<li>Fixed a problem when running the tests locally in a PowerShell console it would ask for parameters (<a href="https://github.com/PowerShell/xSQLServer/issues/897">issue 897</a>).</li>
</ul>
</li>
<li>Changes to xSQLServerMaxDop
<ul>
<li>Made the resource cluster aware. When ProcessOnlyOnActiveNode is specified, the resource will only determine if a change is needed if the target node is the active host of the SQL Server instance (<a href="https://github.com/PowerShell/xSQLServer/issues/882">issue 882</a>).</li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td>xStorage</td>
<td>3.3.0.0</td>
<td>
<ul>
<li>Opted into common tests for Module and Script files &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/115">Issue 115</a>.</li>
<li>xDisk:
<ul>
<li>Added support for Guid Disk Id type &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/104">Issue 104</a>.</li>
<li>Added parameter AllowDestructive &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/11">Issue 11</a>.</li>
<li>Added parameter ClearDisk &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/50">Issue 50</a>.</li>
</ul>
</li>
<li>xDiskAccessPath:
<ul>
<li>Added support for Guid Disk Id type &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/104">Issue 104</a>.</li>
</ul>
</li>
<li>xWaitForDisk:
<ul>
<li>Added support for Guid Disk Id type &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/104">Issue 104</a>.</li>
</ul>
</li>
<li>Added .markdownlint.json file to configure markdown rules to validate.</li>
<li>Clean up Badge area in README.MD &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/110">Issue 110</a>.</li>
<li>Disabled MD013 rule checking to enable badge table.</li>
<li>Added .github support files:
<ul>
<li>CONTRIBUTING.md</li>
<li>ISSUE_TEMPLATE.md</li>
<li>PULL_REQUEST_TEMPLATE.md</li>
</ul>
</li>
<li>Changed license year to 2017 and set company name to Microsoft Corporation in LICENSE.MD and module manifest &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/111">Issue 111</a>.</li>
<li>Set Visual Studio Code setting &#8220;powershell.codeFormatting.preset&#8221; to &#8220;custom&#8221; &#8211; See <a href="https://github.com/PowerShell/xStorage/issues/108">Issue 108</a></li>
<li>Added <code>Documentation and Examples</code> section to Readme.md file &#8211; see <a href="https://github.com/PowerShell/xStorage/issues/116">issue 116</a>.</li>
<li>Prevent unit tests from DSCResource.Tests from running during test execution &#8211; fixes <a href="https://github.com/PowerShell/xStorage/issues/118">Issue 118</a>.</li>
</ul>
</td>
</tr>
<tr>
<td>xWebAdministration</td>
<td>1.19.0.0</td>
<td>
<ul>
<li><strong>xWebAppPoolDefaults</strong> now returns values. Fixes 311.</li>
<li>Added unit tests for <strong>xWebAppPoolDefaults</strong>. Fixes 183.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<h2>How to Find Released DSC Resource Modules</h2>
<p>To see a list of <strong>all</strong> released DSC Resource Kit modules, go to the <a href="http://www.powershellgallery.com/">PowerShell Gallery</a> and display <a href="http://www.powershellgallery.com/packages?q=Tags%3A%22DSCResourceKit%22">all modules tagged as DSCResourceKit</a>. You can also enter a module&#8217;s name in the search box in the upper right corner of the PowerShell Gallery to find a specific module.</p>
<p>Of course, you can also always use PowerShellGet (available in <a href="https://www.microsoft.com/en-us/download/details.aspx?id=50395">WMF 5.0</a>) to find modules with DSC Resources:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c"># To list all modules that are part of the DSC Resource Kit</span>
<span class="pl-c1">Find-Module</span> <span class="pl-k">-</span>Tag DSCResourceKit 
<span class="pl-c"># To list all DSC resources from all sources </span>
<span class="pl-c1">Find-DscResource</span></pre>
</div>
<p>To find a <strong>specific</strong> module, go directly to its URL on the PowerShell Gallery:<br />
<a href="http://www.powershellgallery.com/packages/">http://www.powershellgallery.com/packages/</a>&lt; module name &gt;<br />
For example:<br />
<a href="http://www.powershellgallery.com/packages/xWebAdministration">http://www.powershellgallery.com/packages/xWebAdministration</a></p>
<h2>How to Install DSC Resource Modules From the PowerShell Gallery</h2>
<p>We recommend that you use PowerShellGet to install DSC resource modules:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Install-Module</span> <span class="pl-k">-</span>Name <span class="pl-k">&lt;</span> module name <span class="pl-k">&gt;</span></pre>
</div>
<p>For example:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Install-Module</span> <span class="pl-k">-</span>Name xWebAdministration</pre>
</div>
<p>To update all previously installed modules at once, open an elevated PowerShell prompt and use this command:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Update-Module</span></pre>
</div>
<p>After installing modules, you can discover all DSC resources available to your local system with this command:</p>
<div class="highlight highlight-source-powershell">
<pre><span class="pl-c1">Get-DscResource</span></pre>
</div>
<h2>How to Find DSC Resource Modules on GitHub</h2>
<p>All resource modules in the DSC Resource Kit are available open-source on GitHub.<br />
You can see the most recent state of a resource module by visiting its GitHub page at:<br />
<a href="https://github.com/PowerShell/">https://github.com/PowerShell/</a>&lt; module name &gt;<br />
For example, for the xCertificate module, go to:<br />
<a href="https://github.com/PowerShell/xCertificate">https://github.com/PowerShell/xCertificate</a>.</p>
<p>All DSC modules are also listed as submodules of the <a href="https://github.com/PowerShell/DscResources/">DscResources repository</a> in the <a href="https://github.com/PowerShell/DscResources/tree/master/xDscResources">xDscResources folder</a>.</p>
<h2>How to Contribute</h2>
<p>You are more than welcome to contribute to the development of the DSC Resource Kit! There are several different ways you can help. You can create new DSC resources or modules, add test automation, improve documentation, fix existing issues, or open new ones.<br />
See our <a href="https://github.com/PowerShell/DscResources/blob/master/CONTRIBUTING.md">contributing guide</a> for more info on how to become a DSC Resource Kit contributor.</p>
<p>If you would like to help, please take a look at the list of <a href="https://github.com/PowerShell/DscResources/issues">open issues</a> for the DscResources repository.<br />
You can also check issues for specific resource modules by going to:<br />
<a href="https://github.com/PowerShell/">https://github.com/PowerShell/</a>&lt; module name &gt;/issues<br />
For example:<br />
<a href="https://github.com/PowerShell/xPSDesiredStateConfiguration/issues">https://github.com/PowerShell/xPSDesiredStateConfiguration/issues</a></p>
<p>Your help in developing the DSC Resource Kit is invaluable to us!</p>
<h2>Questions, comments?</h2>
<p>If you&#8217;re looking into using PowerShell DSC, have questions or issues with a current resource, or would like a new resource, let us know in the comments below, on Twitter (<a href="https://twitter.com/PowerShell_Team">@PowerShell_Team</a>), or by creating an issue on <a href="https://github.com/powershell/dscresources/issues">GitHub</a>.</p>
<p>Katie Keim<br />
Software Engineer<br />
PowerShell DSC Team<br />
<a href="https://twitter.com/katiedsc">@katiedsc</a> (Twitter)<br />
<a href="https://github.com/kwirkykat">@kwirkykat</a> (GitHub)</p>
</div>
]]></content:encoded>
			<wfw:commentRss>https://blogs.msdn.microsoft.com/powershell/2017/11/15/dsc-resource-kit-release-november-2017/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
